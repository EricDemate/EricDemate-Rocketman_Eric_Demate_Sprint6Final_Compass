{
	"info": {
		"_postman_id": "e65df1ca-34e6-4308-8558-52a76fb3010e",
		"name": "ServeRest_Final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21748091"
	},
	"item": [
		{
			"name": "Testes Regressivos",
			"item": [
				{
					"name": "CT04- validar rota de  Login de Usuário",
					"item": [
						{
							"name": "CT04.3 Login c/ email em branco",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const nameDefault = pm.environment.get('nameDefault')\r",
											"const emailDefault = pm.environment.get('emailDefault')\r",
											"const pwsDefault = pm.environment.get('pwsDefault')\r",
											"\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": `${nameDefault}`,\r",
											"            \"email\": `${emailDefault}`,\r",
											"            \"password\": `${pwsDefault}`,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, (err, response)  => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idUserDefault' ,  res._id)\r",
											"        //console.log(res._id)\r",
											"    } catch{\r",
											"        //operação\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 400\", function () {\r",
											"    pm.response.to.have.status(400);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'email não pode ficar em branco'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"const atributos = ['email']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('_idUserDefault');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"//apaga a variavel _idUserDefault da environment\r",
											"pm.environment.set(\"_idUserDefault\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"123mudar\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT04.1 Login s/ senha",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const nameDefault = pm.environment.get('nameDefault')\r",
											"const emailDefault = pm.environment.get('emailDefault')\r",
											"const pwsDefault = pm.environment.get('pwsDefault')\r",
											"\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": `${nameDefault}`,\r",
											"            \"email\": `${emailDefault}`,\r",
											"            \"password\": `${pwsDefault}`,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, (err, response)  => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idUserDefault' ,  res._id)\r",
											"        //console.log(res._id)\r",
											"    } catch{\r",
											"        //operação\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 400\", function () {\r",
											"    pm.response.to.have.status(400);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'password não pode ficar em branco'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"const atributos = ['password']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('_idUserDefault');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"//apaga a variavel _idUserDefault da environment\r",
											"pm.environment.set(\"_idUserDefault\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailDefault}}\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT04.2 Login s/ êxito -> senha ou email invalido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const nameDefault = pm.environment.get('nameDefault')\r",
											"const emailDefault = pm.environment.get('emailDefault')\r",
											"const pwsDefault = pm.environment.get('pwsDefault')\r",
											"\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": `${nameDefault}`,\r",
											"            \"email\": `${emailDefault}`,\r",
											"            \"password\": `${pwsDefault}`,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, (err, response)  => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idUserDefault' ,  res._id)\r",
											"        //console.log(res._id)\r",
											"    } catch{\r",
											"        //operação\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 401\", function () {\r",
											"    pm.response.to.have.status(401);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Email e/ou senha inválidos'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
											"});\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('_idUserDefault');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"//apaga a variavel _idUserDefault da environment\r",
											"pm.environment.set(\"_idUserDefault\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailDefault}}\",\r\n    \"password\": \"321mudar\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT04 Login c/ êxito",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const nameDefault = pm.environment.get('nameDefault')\r",
											"const emailDefault = pm.environment.get('emailDefault')\r",
											"const pwsDefault = pm.environment.get('pwsDefault')\r",
											"\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": `${nameDefault}`,\r",
											"            \"email\": `${emailDefault}`,\r",
											"            \"password\": `${pwsDefault}`,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, (err, response)  => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idUserDefault' ,  res._id)\r",
											"        //console.log(res._id)\r",
											"    } catch{\r",
											"        //operação\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Login realizado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"const atributos = ['message','authorization']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('_idUserDefault');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"//apaga a variavel _idUserDefault da environment\r",
											"pm.environment.set(\"_idUserDefault\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailDefault}}\",\r\n    \"password\": \"{{pwsDefault}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/usuarios",
					"item": [
						{
							"name": "CT01- validar rota Cadastro de Usuário",
							"item": [
								{
									"name": "CT01.1 Cadastrar Usuario s/ nome",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Verica se o verbo está correto\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"const atributos = ['nome']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'nome não pode ficar em branco'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"{{emailDefault}}\",\r\n  \"password\": \"{{pwsDefault}}\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT01.2 Cadastrar Usuario email incorreto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Verica se o verbo está correto\r",
													"pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"const atributos = ['email']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'email deve ser um email válido'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{nameDefault}}\",\r\n  \"email\": \"{{userDefault}}\",\r\n  \"password\": \"{{pwsDefault}}\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT01.3 Cadastrar Usuario s/ email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"const atributos = ['email']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'email não pode ficar em branco'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{nameDefault}}\",\r\n  \"email\": \"\",\r\n  \"password\": \"{{pwsDefault}}\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT01.4 Cadastrar Usuario s/ senha",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"const atributos = ['password']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'password não pode ficar em branco'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{userDefault}}\",\r\n  \"email\": \"{{emailDefault}}\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT01.5 Cadastrar Usuario admin sem valor booleano",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"const atributos = ['administrador']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'administrador deve ser 'true' ou 'false'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{nameDefault}}\",\r\n  \"email\": \"{{emailDefault}}\",\r\n  \"password\": \"{{pwsDefault}}\",\r\n  \"administrador\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT01.6 Cadastrar Usuario já existente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Este email já está sendo usado'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//apaga a variavel _idUserDefault da environment\r",
													"pm.environment.set(\"_idUserDefault\", \"\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"const nameDefault = pm.environment.get('nameDefault')\r",
													"const emailDefault = pm.environment.get('emailDefault')\r",
													"const pwsDefault = pm.environment.get('pwsDefault')\r",
													"\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefault}`,\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_idUserDefault' ,  res._id)\r",
													"        //console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{nameDefault}}\",\r\n  \"email\": \"{{emailDefault}}\",\r\n  \"password\": \"{{pwsDefault}}\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT01  Cadastrar Usuario - c/ êxito",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui o id criado a uma variavel\r",
													"const response = pm.response.json()\r",
													"pm.environment.set(\"_id\", response._id.slice(0)); \r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 201\", function () {\r",
													"    pm.response.to.have.status(201);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
													"    pm.response.to.have.status('Created');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Cadastro realizado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Eric\",\r\n  \"email\": \"eric@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "BUG-01  Cadastrar Usuario - c/ 1 caracter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui o id criado a uma variavel\r",
													"const response = pm.response.json()\r",
													"pm.environment.set(\"_id\", response._id.slice(0)); \r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Created');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Não é permitido esta senha'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Não é permitido esta senha\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Eric\",\r\n  \"email\": \"eric@qa.com.br\",\r\n  \"password\": \"1\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CT05- validar rota de Modificação de Usuário",
							"item": [
								{
									"name": "CT05 Modificar Usuario existente - c/ êxito",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui o id criado a uma variavel\r",
													"//const response = pm.response.json()\r",
													"//pm.environment.set(\"_id\", response._id); \r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id' ,  res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Eric\",\r\n  \"email\": \"eric@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT05.1 Modificar Usuario existente admin para normal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui o id criado a uma variavel\r",
													"//const response = pm.response.json()\r",
													"//pm.environment.set(\"_id\", response._id); \r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id' ,  res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Eric\",\r\n  \"email\": \"eric@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"false\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT05.2 Modificar Usuario existente - s/ nome",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui o id criado a uma variavel\r",
													"//const response = pm.response.json()\r",
													"//pm.environment.set(\"_id\", response._id); \r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'nome não pode ficar em branco'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['nome']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id' ,  res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"eric@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT05.3 Modificar Usuario existente - email incorreto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui o id criado a uma variavel\r",
													"//const response = pm.response.json()\r",
													"//pm.environment.set(\"_id\", response._id); \r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"email deve ser um email válido'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['email']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id' ,  res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Fulano\",\r\n  \"email\": \"fulanoqa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT05.4 Modificar Usuario existente - email duplicado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui o id criado a uma variavel\r",
													"//const response = pm.response.json()\r",
													"//pm.environment.set(\"_id\", response._id); \r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Este email já está sendo usado'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id' ,  res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Fulano\",\r\n  \"email\": \"usuariox@qa.com\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/bhL7nkZfCz2xUYqs",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"bhL7nkZfCz2xUYqs"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT05.5 Modificar Usuario existente - s/ email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui o id criado a uma variavel\r",
													"//const response = pm.response.json()\r",
													"//pm.environment.set(\"_id\", response._id); \r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"email não pode ficar em branco'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['email']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id' ,  res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Fulano\",\r\n  \"email\": \"\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT05.6 Modificar Usuario existente - s/ senha",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui o id criado a uma variavel\r",
													"//const response = pm.response.json()\r",
													"//pm.environment.set(\"_id\", response._id); \r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"password não pode ficar em branco'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['password']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id' ,  res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Fulano\",\r\n  \"email\": \"teste@qa.com.br\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT05.7 Modificar Usuario existente - s/ valor booleanoopy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui o id criado a uma variavel\r",
													"//const response = pm.response.json()\r",
													"//pm.environment.set(\"_id\", response._id); \r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"administrador deve ser 'true' ou 'false'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['administrador']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id' ,  res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Fulano\",\r\n  \"email\": \"teste@qa.com.br\",\r\n  \"password\": \"123mudar\",\r\n  \"administrador\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT05.8 Modificar Usuario inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui o id criado a uma variavel\r",
													"const response = pm.response.json()\r",
													"pm.environment.set(\"_id\", response._id); \r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 201\", function () {\r",
													"    pm.response.to.have.status(201);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
													"    pm.response.to.have.status('Created');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Cadastro realizado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/*const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id' ,  res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Eric\",\r\n  \"email\": \"eric@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/hv9BDRJOewH22PPw",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"hv9BDRJOewH22PPw"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CT07- validar rota Remoção de Usuário",
							"item": [
								{
									"name": "CT07.1 Deletar Usuario s/ _id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id' ,  res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 405\", function () {\r",
													"    pm.response.to.have.status(405);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Method Not Allowed'\", function () {\r",
													"    pm.response.to.have.status('Method Not Allowed');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"\r",
													"//verifica se o Body contem os seguintes atributos\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Não é possível realizar DELETE em /usuarios/. Acesse http://localhost:3000 para ver as rotas disponíveis e como utilizá-las.'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Não é possível realizar DELETE em /usuarios/. Acesse http://localhost:3000 para ver as rotas disponíveis e como utilizá-las.\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/usuarios/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT07.2 Deletar Usuario Inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/*const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id' ,  res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});\r",
													"*/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//verifica se o Body contem os seguintes atributos\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Nenhum registro excluído'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Nenhum registro excluído\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/usuarios/0uxudt0cbmQhpEz2",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"0uxudt0cbmQhpEz2"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT07.3 Deletar Usuario c/ carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id' ,  res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//verifica se o Body contem os seguintes atributos\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Nenhum registro excluído'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Nenhum registro excluído\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"\r",
													"/*pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('id', response._id);\r",
													"})*/\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/usuarios/0uxuPY0cbmQhpEz1",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"0uxuPY0cbmQhpEz1"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT07 Deletar Usuario - c/ êxito",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id', res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//verifica se o Body contem os seguintes atributos\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Registro excluído com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CT11- validar rota de listagem de Usuário",
							"item": [
								{
									"name": "CT11 Listar Usuarios",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"\r",
													"///Verifica se os atributos estão criados\r",
													"const atributos = ['quantidade', 'usuarios']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT11.1 Listar Usuarios c/ {_id}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['nome', 'email', 'password', 'administrador', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_id');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"//apaga a variavel _id da environment\r",
													"pm.environment.set(\"_id\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"Usuario X\",\r",
													"            \"email\": \"usuariox@qa.com\",\r",
													"            \"password\": \"123mudar\",\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_id' ,  res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT11.2 Listar Usuarios inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Usuário não encontrado'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Usuário não encontrado\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/usuarios/0uxuPY0cbmQhpEz2",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"0uxuPY0cbmQhpEz2"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/produtos",
					"item": [
						{
							"name": "CT02- validar rota de Cadastro de Produto",
							"item": [
								{
									"name": "CT02 Cadastrar Produto c/ êxito",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let url = pm.environment.get('baseURL')\r",
													"let nameDefault = pm.environment.get('nameDefault')\r",
													"let emailDefault = pm.environment.get('emailDefault')\r",
													"let pwsDefault = pm.environment.get('pwsDefault')\r",
													"\r",
													"//-------------------------------------------------------------------\r",
													"//Excluindo o usuario criado\r",
													"url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"//-------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Cadastra usuario\r",
													"let postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefault}`,\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    let res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_idUserDefault' ,  res._id)\r",
													"        console.log(res._id)\r",
													"\r",
													"        pm.sendRequest(postRequest2, (err, response) => {\r",
													"    let res2 = response.json()\r",
													"    console.log(err ? err : res2);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('token' , res2.authorization.slice(7))\r",
													"        console.log(res.authorization.slice(7))\r",
													"    }catch { \r",
													"        //operação\r",
													"        //console.warn('FAIL2')\r",
													"    } \r",
													"\r",
													"});\r",
													"\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL1')\r",
													"    }\r",
													"});\r",
													"\r",
													"//___________________________________________________________________________\r",
													"\r",
													"//Efetua o login do usuario\r",
													"let postRequest2 = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type' : 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`\r",
													"    })\r",
													"    }\r",
													"}\r",
													"\r",
													"/*\r",
													"pm.sendRequest(postRequest2, (err, response) => {\r",
													"    let res2 = response.json()\r",
													"    console.log(err ? err : res2);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('token' , res2.authorization.slice(7))\r",
													"        console.log(res.authorization.slice(7))\r",
													"    }catch { \r",
													"        //operação\r",
													"        console.warn('FAIL2')\r",
													"    }  \r",
													"//console.log(res.authorization)\r",
													"});\r",
													"*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respID = pm.response.json()\r",
													"pm.environment.set(\"_idProduct\", respID._id); \r",
													"//console.log(respID._id);\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(201);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
													"    pm.response.to.have.status('Created');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Cadastro realizado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//Excluir produto cadastrado\r",
													"\r",
													"let url = pm.environment.get('baseURL')\r",
													"let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"console.log(pm.environment.get('token'))\r",
													"\r",
													"  let deleteUser = {\r",
													"    url:`${url}/produtos/${idProduct}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(deleteUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"//_________________________________________________________________________\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"/*\r",
													"//Limpar as variaveis _idProduct, token e _idUserDefault\r",
													"pm.environment.set(\"_idProduct\", \"\");\r",
													"pm.environment.set(\"token\", \"\");\r",
													"pm.environment.set(\"_idUserDefault\", \"\");\r",
													"*/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Teste 1\",\r\n  \"preco\": 100,\r\n  \"descricao\": \"teste\",\r\n  \"quantidade\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT02.1 Cadastrar Produto c/ usuario",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let url = pm.environment.get('baseURL')\r",
													"let nameDefault = pm.environment.get('nameDefault')\r",
													"let emailDefault = pm.environment.get('emailDefault')\r",
													"let pwsDefault = pm.environment.get('pwsDefault')\r",
													"let admin = pm.environment.get('admin')\r",
													"let user = pm.environment.get('user')\r",
													"\r",
													"//-------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Cadastra usuario\r",
													"let postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefault}`,\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`,\r",
													"            \"administrador\": `${user}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    let res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_idUserDefault' ,  res._id)\r",
													"        console.log(res._id)\r",
													"\r",
													"        pm.sendRequest(postRequest2, (err, response) => {\r",
													"    let res2 = response.json()\r",
													"    console.log(err ? err : res2);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('token' , res2.authorization.slice(7))\r",
													"        console.log(res.authorization.slice(7))\r",
													"    }catch { \r",
													"        //operação\r",
													"        //console.warn('FAIL2')\r",
													"    } \r",
													"\r",
													"});\r",
													"\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL1')\r",
													"    }\r",
													"});\r",
													"\r",
													"//___________________________________________________________________________\r",
													"\r",
													"//Efetua o login do usuario\r",
													"let postRequest2 = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type' : 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`\r",
													"    })\r",
													"    }\r",
													"}\r",
													"\r",
													"/*\r",
													"pm.sendRequest(postRequest2, (err, response) => {\r",
													"    let res2 = response.json()\r",
													"    console.log(err ? err : res2);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('token' , res2.authorization.slice(7))\r",
													"        console.log(res.authorization.slice(7))\r",
													"    }catch { \r",
													"        //operação\r",
													"        console.warn('FAIL2')\r",
													"    }  \r",
													"//console.log(res.authorization)\r",
													"});\r",
													"*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respID = pm.response.json()\r",
													"pm.environment.set(\"_idProduct\", respID._id); \r",
													"//console.log(respID._id);\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 403\", function () {\r",
													"    pm.response.to.have.status(403);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Forbidden'\", function () {\r",
													"    pm.response.to.have.status('Forbidden');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Rota exclusiva para administradores'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//Excluir produto cadastrado\r",
													"\r",
													"let url = pm.environment.get('baseURL')\r",
													"let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"console.log(pm.environment.get('token'))\r",
													"\r",
													"  let deleteUser = {\r",
													"    url:`${url}/produtos/${idProduct}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(deleteUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"//_________________________________________________________________________\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"/*\r",
													"//Limpar as variaveis _idProduct, token e _idUserDefault\r",
													"pm.environment.set(\"_idProduct\", \"\");\r",
													"pm.environment.set(\"token\", \"\");\r",
													"pm.environment.set(\"_idUserDefault\", \"\");\r",
													"*/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Teste 1\",\r\n  \"preco\": 100,\r\n  \"descricao\": \"teste\",\r\n  \"quantidade\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT02.2 Cadastrar Produto c/ token ausente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let url = pm.environment.get('baseURL')\r",
													"let nameDefault = pm.environment.get('nameDefault')\r",
													"let emailDefault = pm.environment.get('emailDefault')\r",
													"let pwsDefault = pm.environment.get('pwsDefault')\r",
													"\r",
													"\r",
													"//-------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Cadastra usuario\r",
													"let postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefault}`,\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    let res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_idUserDefault' ,  res._id)\r",
													"        //console.log(res._id)\r",
													"\r",
													"     /*   pm.sendRequest(postRequest2, (err, response) => {\r",
													"    let res2 = response.json()\r",
													"    console.log(err ? err : res2);\r",
													"    try {\r",
													"        //operação\r",
													"        //pm.environment.set('token' , res2.authorization.slice(7))\r",
													"        //console.log(res.authorization.slice(7))\r",
													"    }catch { \r",
													"        //operação\r",
													"        //console.warn('FAIL2')\r",
													"    }  \r",
													"\r",
													"}); */\r",
													"\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL1')\r",
													"    }\r",
													"});\r",
													"\r",
													"//___________________________________________________________________________\r",
													"\r",
													"//Efetua o login do usuario\r",
													"let postRequest2 = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type' : 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`\r",
													"    })\r",
													"    }\r",
													"}\r",
													"\r",
													"/*\r",
													"pm.sendRequest(postRequest2, (err, response) => {\r",
													"    let res2 = response.json()\r",
													"    console.log(err ? err : res2);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('token' , res2.authorization.slice(7))\r",
													"        console.log(res.authorization.slice(7))\r",
													"    }catch { \r",
													"        //operação\r",
													"        console.warn('FAIL2')\r",
													"    }  \r",
													"//console.log(res.authorization)\r",
													"});\r",
													"*/\r",
													"pm.environment.set(\"token\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respID = pm.response.json()\r",
													"pm.environment.set(\"_idProduct\", respID._id); \r",
													"//console.log(respID._id);\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 401\", function () {\r",
													"    pm.response.to.have.status(401);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Unauthorized'\", function () {\r",
													"    pm.response.to.have.status('Unauthorized');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//Excluir produto cadastrado\r",
													"\r",
													"let url = pm.environment.get('baseURL')\r",
													"let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"//console.log(pm.environment.get('token'))\r",
													"\r",
													"  let deleteUser = {\r",
													"    url:`${url}/produtos/${idProduct}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(deleteUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//_________________________________________________________________________\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"\r",
													"//Limpar as variaveis _idProduct, token e _idUserDefault\r",
													"pm.environment.set(\"_idProduct\", \"\");\r",
													"pm.environment.set(\"token\", \"\");\r",
													"pm.environment.set(\"_idUserDefault\", \"\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Teste 1\",\r\n  \"preco\": 100,\r\n  \"descricao\": \"teste\",\r\n  \"quantidade\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT02.3 Cadastrar Produto existente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let url = pm.environment.get('baseURL')\r",
													"let nameDefault = pm.environment.get('nameDefault')\r",
													"let emailDefault = pm.environment.get('emailDefault')\r",
													"let pwsDefault = pm.environment.get('pwsDefault')\r",
													"let admin = pm.environment.get('admin')\r",
													"let user = pm.environment.get('user')\r",
													"\r",
													"//-------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Cadastra usuario\r",
													"let postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefault}`,\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`,\r",
													"            \"administrador\": `${admin}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    let res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_idUserDefault' ,  res._id)\r",
													"        console.log(res._id)\r",
													"\r",
													"        pm.sendRequest(postRequest2, (err, response) => {\r",
													"    let res2 = response.json()\r",
													"    console.log(err ? err : res2);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('token' , res2.authorization.slice(7))\r",
													"        console.log(res.authorization.slice(7))\r",
													"    }catch { \r",
													"        //operação\r",
													"        //console.warn('FAIL2')\r",
													"    } \r",
													"\r",
													"});\r",
													"\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL1')\r",
													"    }\r",
													"});\r",
													"\r",
													"//___________________________________________________________________________\r",
													"\r",
													"//Efetua o login do usuario\r",
													"let postRequest2 = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type' : 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`\r",
													"    })\r",
													"    }\r",
													"}\r",
													"\r",
													"/*\r",
													"pm.sendRequest(postRequest2, (err, response) => {\r",
													"    let res2 = response.json()\r",
													"    console.log(err ? err : res2);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('token' , res2.authorization.slice(7))\r",
													"        console.log(res.authorization.slice(7))\r",
													"    }catch { \r",
													"        //operação\r",
													"        console.warn('FAIL2')\r",
													"    }  \r",
													"//console.log(res.authorization)\r",
													"});\r",
													"*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respID = pm.response.json()\r",
													"pm.environment.set(\"_idProduct\", respID._id); \r",
													"//console.log(respID._id);\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Já existe produto com esse nome'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//Excluir produto cadastrado\r",
													"\r",
													"let url = pm.environment.get('baseURL')\r",
													"let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"console.log(pm.environment.get('token'))\r",
													"\r",
													"  let deleteUser = {\r",
													"    url:`${url}/produtos/${idProduct}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(deleteUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"//_________________________________________________________________________\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"\r",
													"//Limpar as variaveis _idProduct, token e _idUserDefault\r",
													"pm.environment.set(\"_idProduct\", \"\");\r",
													"pm.environment.set(\"token\", \"\");\r",
													"pm.environment.set(\"_idUserDefault\", \"\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"Logitech MX Vertical\",\r\n    \"preco\": 470,\r\n    \"descricao\": \"Mouse\",\r\n    \"quantidade\": 382\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "BUG2 Cadastrar Produto c/ numero em seu nome",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let url = pm.environment.get('baseURL')\r",
													"let nameDefault = pm.environment.get('nameDefault')\r",
													"let emailDefault = pm.environment.get('emailDefault')\r",
													"let pwsDefault = pm.environment.get('pwsDefault')\r",
													"let admin = pm.environment.get('admin')\r",
													"let user = pm.environment.get('user')\r",
													"\r",
													"//-------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Cadastra usuario\r",
													"let postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefault}`,\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`,\r",
													"            \"administrador\": `${admin}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response)  => {\r",
													"    let res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_idUserDefault' ,  res._id)\r",
													"        console.log(res._id)\r",
													"\r",
													"        pm.sendRequest(postRequest2, (err, response) => {\r",
													"    let res2 = response.json()\r",
													"    console.log(err ? err : res2);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('token' , res2.authorization.slice(7))\r",
													"        console.log(res.authorization.slice(7))\r",
													"    }catch { \r",
													"        //operação\r",
													"        //console.warn('FAIL2')\r",
													"    } \r",
													"\r",
													"});\r",
													"\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL1')\r",
													"    }\r",
													"});\r",
													"\r",
													"//___________________________________________________________________________\r",
													"\r",
													"//Efetua o login do usuario\r",
													"let postRequest2 = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type' : 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`\r",
													"    })\r",
													"    }\r",
													"}\r",
													"\r",
													"/*\r",
													"pm.sendRequest(postRequest2, (err, response) => {\r",
													"    let res2 = response.json()\r",
													"    console.log(err ? err : res2);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('token' , res2.authorization.slice(7))\r",
													"        console.log(res.authorization.slice(7))\r",
													"    }catch { \r",
													"        //operação\r",
													"        console.warn('FAIL2')\r",
													"    }  \r",
													"//console.log(res.authorization)\r",
													"});\r",
													"*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respID = pm.response.json()\r",
													"pm.environment.set(\"_idProduct\", respID._id); \r",
													"//console.log(respID._id);\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Não é permitido este nome de produto'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Não é permitido este nome de produto\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//Excluir produto cadastrado\r",
													"\r",
													"let url = pm.environment.get('baseURL')\r",
													"let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"console.log(pm.environment.get('token'))\r",
													"\r",
													"  let deleteUser = {\r",
													"    url:`${url}/produtos/${idProduct}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(deleteUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"//_________________________________________________________________________\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"\r",
													"//Limpar as variaveis _idProduct, token e _idUserDefault\r",
													"pm.environment.set(\"_idProduct\", \"\");\r",
													"pm.environment.set(\"token\", \"\");\r",
													"pm.environment.set(\"_idUserDefault\", \"\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"10\",\r\n    \"preco\": 470,\r\n    \"descricao\": \"Mouse\",\r\n    \"quantidade\": 382\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CT06- validar rota de Modificação de Produto",
							"item": [
								{
									"name": "Login admin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let url = pm.environment.get('baseURL')\r",
													"let nameDefault = pm.environment.get('nameDefault')\r",
													"let emailDefault = pm.environment.get('emailDefault')\r",
													"let pwsDefault = pm.environment.get('pwsDefault')\r",
													"let admin = pm.environment.get('admin')\r",
													"\r",
													"let postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefault}`,\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`,\r",
													"            \"administrador\": `${admin}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    let res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_idUserDefault', res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//adiciona bearer token a vaviavel token \r",
													"let res = pm.response.json()\r",
													"pm.environment.set('token' , res.authorization.slice(7))\r",
													"console.log(\"Bearer Token:\"+res.authorization.slice(7))\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Login realizado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['message','authorization']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{emailDefault}}\",\r\n    \"password\": \"{{pwsDefault}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT06.1 Modificar Produto c/ mesmo nome",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Já existe produto com esse nome'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"Samsung 60 polegadas\",\r\n    \"preco\": 5240,\r\n    \"descricao\": \"TV\",\r\n    \"quantidade\": 49977\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/{{_idProduct1}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{_idProduct1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT06.2 Modificar Produto s/ token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 401\", function () {\r",
													"    pm.response.to.have.status(401);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Unauthorized'\", function () {\r",
													"    pm.response.to.have.status('Unauthorized');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"Samsung 60 polegadas\",\r\n    \"preco\": 5240,\r\n    \"descricao\": \"TV\",\r\n    \"quantidade\": 49977,\r\n    \"_id\": \"K6leHdftCeOJj8BJ\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/{{_idProduct1}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{_idProduct1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT06.3 Modificar Produto c/ {_id} inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL');\r",
													"let nameDefault = pm.environment.get('nameDefault');\r",
													"let emailDefault = pm.environment.get('emailDefault');\r",
													"let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduto = pm.environment.get('_idProduct');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user')\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"//Cria o produto\r",
													"let postRequest3 = {\r",
													"    url: `${url}/produtos`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': `${token2}`\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"SSD 1TB\",\r",
													"            \"preco\": \"500\",\r",
													"            \"descricao\": \"SSD Sata3\",\r",
													"            \"quantidade\": \"10\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest3, (err, response) => {\r",
													"    let res3 = response.json()\r",
													"    console.log(err ? err : res3);\r",
													"    pm.environment.set('_idProduct', res3._id)\r",
													"    console.log(res3._id)\r",
													"})\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respID = pm.response.json()\r",
													"pm.environment.set(\"_idProductNOT\", respID._id); \r",
													"console.log(respID._id);\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 201\", function () {\r",
													"    pm.response.to.have.status(201);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
													"    pm.response.to.have.status('Created');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Cadastro realizado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"//Excluir produto cadastrado 1\r",
													"let token2 = 'Bearer ' + pm.environment.get('token')\r",
													"const url1 = pm.environment.get('baseURL')\r",
													"let idProductNOT = pm.environment.get('_idProductNOT')\r",
													"\r",
													"console.log(pm.environment.get('token'))\r",
													"console.log(\"tentando deletar este produto: \"+ idProductNOT)\r",
													"\r",
													"  let delProduct1 = {\r",
													"    url:`${url1}/produtos/${idProductNOT}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token2}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delProduct1,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//Excluir produto cadastrado 2\r",
													"\r",
													"const url2 = pm.environment.get('baseURL')\r",
													"let idProduct2 = pm.environment.get('_idProduct')\r",
													"\r",
													"\r",
													"console.log(pm.environment.get('token'))\r",
													"console.log(\"tentando deletar este produto: \"+ idProduct2)\r",
													"\r",
													"  let delProduct2 = {\r",
													"    url:`${url2}/produtos/${idProduct2}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token2}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delProduct2,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"HDD 1TB\",\r\n    \"preco\": \"450\",\r\n    \"descricao\": \"HDD Sata3\",\r\n    \"quantidade\": \"10\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/{{_idProductNOT}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{_idProductNOT}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT06 Modificar Produto c/ êxito",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL');\r",
													"let nameDefault = pm.environment.get('nameDefault');\r",
													"let emailDefault = pm.environment.get('emailDefault');\r",
													"let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduto = pm.environment.get('_idProduct');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user')\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"//Cria o produto\r",
													"let postRequest3 = {\r",
													"    url: `${url}/produtos`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': `${token2}`\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"SSD 1TB\",\r",
													"            \"preco\": \"500\",\r",
													"            \"descricao\": \"SSD Sata3\",\r",
													"            \"quantidade\": \"10\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest3, (err, response) => {\r",
													"    let res3 = response.json()\r",
													"    console.log(err ? err : res3);\r",
													"    pm.environment.set('_idProduct', res3._id)\r",
													"    console.log(res3._id)\r",
													"})\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*\r",
													"//atribui variavel a idProduct\r",
													"let respID = pm.response.json()\r",
													"pm.environment.set(\"_idProduct\", respID._id); \r",
													"//console.log(respID._id);\r",
													"/\r",
													"/---------------------------------------------------------------------------\r",
													"*/\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//Excluir produto cadastrado\r",
													"\r",
													"let url = pm.environment.get('baseURL')\r",
													"let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"console.log(pm.environment.get('token'))\r",
													"console.log(\"tentando deletar este produto: \"+ idProduct)\r",
													"\r",
													"  let deleteUser = {\r",
													"    url:`${url}/produtos/${idProduct}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(deleteUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"//_________________________________________________________________________\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"/*\r",
													"//Limpar as variaveis _idProduct, token e _idUserDefault\r",
													"pm.environment.set(\"_idProduct\", \"\");\r",
													"pm.environment.set(\"token\", \"\");\r",
													"pm.environment.set(\"_idUserDefault\", \"\");\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"HDD 1TB\",\r\n    \"preco\": \"450\",\r\n    \"descricao\": \"HDD Sata3\",\r\n    \"quantidade\": \"10\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/{{_idProduct}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{_idProduct}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT06.4 Modificar Produto c/ usuario comum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"start pre-request! 'Deletar Produtos c/ usuario comum\");\r",
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL');\r",
													"let nameDefault = pm.environment.get('nameDefault');\r",
													"let emailDefault = pm.environment.get('emailDefault');\r",
													"let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduto = pm.environment.get('_idProduct');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user')\r",
													"console.log(\"URL: \" + url);\r",
													"console.log(\"Nome: \" + nameDefault);\r",
													"console.log(\"Email Cadastrado: \"+ emailDefault);\r",
													"console.log(\"Tipo de Conta 'user': \"+ user);\r",
													"console.log(\"Tipo de conta 'admin': \"+admin);\r",
													"console.log(\"Senha: \"+ pwsDefault);\r",
													"console.log(\"ID do Usuario: \"+idUserDefault)\r",
													"console.log(\"token 1: \"+ token);\r",
													"console.log(\"token 2: \" + token2);\r",
													"console.log(\"Nome do Produto:\" + nameDefaultProduct);\r",
													"console.log(\"Descrição: \"+descriptionProduct);\r",
													"console.log(\"Valor: \"+amount);\r",
													"console.log(\"Preço: \"+priceDefault);\r",
													"console.log(\"ID produto: \"+ idProduto);\r",
													"\r",
													"\r",
													"\r",
													"//-------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Cadastra usuario\r",
													"let postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefault}`,\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`,\r",
													"            \"administrador\": `${user}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"//___________________________________________________________________________\r",
													"\r",
													"//Efetua o login do usuario\r",
													"let postRequest2 = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"//___________________________________________________________________________\r",
													"/*\r",
													"//Cadastra novo Produto\r",
													"let postRequest3 = {\r",
													"    url: `${url}/produtos`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': `${token2}`\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefaultProduct}`,\r",
													"            \"preco\": `${priceDefault}`,\r",
													"            \"descricao\": `${descriptionProduct}`,\r",
													"            \"quantidade\": `${amount}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"*/\r",
													"\r",
													"//Cadastra um usuario\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    let res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    console.log(\"Cadastra um usuario: \"+ res)\r",
													"    try {\r",
													"        //atribui o _idUserDefault\r",
													"        pm.environment.set('_idUserDefault', res._id)\r",
													"        console.log(\"atribui o _idUserDefault: \"+ res._id)\r",
													"        \r",
													"        //Efetua o login do usuario\r",
													"        pm.sendRequest(postRequest2, (err, response) => {\r",
													"            let res2 = response.json()\r",
													"            console.log(err ? err : res2);\r",
													"            console.log(\"Efetua o login do usuario: \"+ res2.email)\r",
													"            \r",
													"            try {\r",
													"                //atribui o token \r",
													"                pm.environment.set('token', res2.authorization.slice(7))\r",
													"                console.log(\"Atribuiu o token: \"+ res2.authorization.slice(7))\r",
													"\r",
													"/*\r",
													"                //Cria o produto\r",
													"                pm.sendRequest(postRequest3, (err, response) => {\r",
													"                    let res3 = response.json()\r",
													"                    console.log(err ? err : res3);\r",
													"                    try {\r",
													"                        //operação\r",
													"                        pm.environment.set('_idProduct', res3._id)\r",
													"                        console.log(res3._id)\r",
													"                    } catch {\r",
													"                        //operação\r",
													"                        //console.warn('FAIL')\r",
													"                    }\r",
													"              });\r",
													"*/\r",
													"            } catch {\r",
													"                //operação\r",
													"                //console.warn('FAIL')\r",
													"            }\r",
													"        });\r",
													"    } catch {\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});\r",
													"console.log(\"Final pre-request Deletar Produtos c/ usuario comum\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"start Test 'Deletar Produtos c/ usuario comum!'\");\r",
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL');\r",
													"let nameDefault = pm.environment.get('nameDefault');\r",
													"let emailDefault = pm.environment.get('emailDefault');\r",
													"let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduto = pm.environment.get('_idProduct');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user')\r",
													"\r",
													"/*\r",
													"console.log(\"URL: \" + url);\r",
													"console.log(\"Nome: \" + nameDefault);\r",
													"console.log(\"Email Cadastrado: \"+ emailDefault);\r",
													"console.log(\"Tipo de Conta 'user': \"+ user);\r",
													"console.log(\"Tipo de conta 'admin': \"+admin);\r",
													"console.log(\"Senha: \"+ pwsDefault);\r",
													"console.log(\"ID do Usuario: \"+idUserDefault)\r",
													"console.log(\"token 1: \"+ token);\r",
													"console.log(\"token 2: \" + token2);\r",
													"console.log(\"Nome do Produto:\" + nameDefaultProduct);\r",
													"console.log(\"Descrição: \"+descriptionProduct);\r",
													"console.log(\"Valor: \"+amount);\r",
													"console.log(\"Preço: \"+priceDefault);\r",
													"console.log(\"ID produto: \"+ idProduto);\r",
													"console.log(\"--------------------------------------//--------------------------------------\");\r",
													"*/\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 403\", function () {\r",
													"    pm.response.to.have.status(403);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Forbidden'\", function () {\r",
													"    pm.response.to.have.status('Forbidden');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//verifica se o Body contem os seguintes atributos\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Rota exclusiva para administradores'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"//let url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    console.log(\"Excluindo o usuario criado: \"+ delUser)\r",
													"\r",
													"})\r",
													"//exibe lista de uruario \r",
													"let  listUser = {\r",
													"    url: `${url}/usuarios` ,   //variavel\r",
													"    method: 'GET',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(listUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    console.log(\"Info sobre usuario: \"+ listUser);\r",
													"\r",
													"})\r",
													"console.log(\"Final test!Deletar Produtos c/ usuario comum\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"Samsung 60 polegadas\",\r\n    \"preco\": 5240,\r\n    \"descricao\": \"TV\",\r\n    \"quantidade\": 49977,\r\n    \"_id\": \"K6leHdftCeOJj8BJ\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/{{_idProduct1}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{_idProduct1}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CT08- validar rota de Remoção de Produto",
							"item": [
								{
									"name": "Login admin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let url = pm.environment.get('baseURL')\r",
													"let nameDefault = pm.environment.get('nameDefault')\r",
													"let emailDefault = pm.environment.get('emailDefault')\r",
													"let pwsDefault = pm.environment.get('pwsDefault')\r",
													"let admin = pm.environment.get('admin')\r",
													"\r",
													"let postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefault}`,\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`,\r",
													"            \"administrador\": `${admin}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    let res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_idUserDefault', res._id)\r",
													"        console.log(res._id)\r",
													"    } catch{\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//adiciona bearer token a vaviavel token \r",
													"let res = pm.response.json()\r",
													"pm.environment.set('token' , res.authorization.slice(7))\r",
													"console.log(\"Bearer Token:\"+res.authorization.slice(7))\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Login realizado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"const atributos = ['message','authorization']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{emailDefault}}\",\r\n    \"password\": \"{{pwsDefault}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT08 Deletar Produtos c/ êxito",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL');\r",
													"let nameDefault = pm.environment.get('nameDefault');\r",
													"let emailDefault = pm.environment.get('emailDefault');\r",
													"let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduto = pm.environment.get('_idProduct');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user')\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"//Cria o produto\r",
													"let postRequest3 = {\r",
													"    url: `${url}/produtos`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': `${token2}`\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": \"SSD 1TB\",\r",
													"            \"preco\": \"500\",\r",
													"            \"descricao\": \"SSD Sata3\",\r",
													"            \"quantidade\": \"10\"\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest3, (err, response) => {\r",
													"    let res3 = response.json()\r",
													"    console.log(err ? err : res3);\r",
													"    pm.environment.set('_idProduct', res3._id)\r",
													"    console.log(res3._id)\r",
													"})\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respID = pm.response.json()\r",
													"pm.environment.set(\"_idProduct\", respID._id);\r",
													"//console.log(respID._id);\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Registro excluído com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos/{{_idProduct}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{_idProduct}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT08.1 Deletar Produtos inseridos em carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"start pre-request Deletar Produtos inseridos em carrinho\")\r",
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL')\r",
													"let nameDefault = pm.environment.get('nameDefault')\r",
													"let emailDefault = pm.environment.get('emailDefault')\r",
													"let pwsDefault = pm.environment.get('pwsDefault')\r",
													"let idProduto = pm.environment.get('_idProduct')\r",
													"let token = pm.environment.get('token')\r",
													"let token2 = 'Bearer ' + pm.environment.get('token')\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct')\r",
													"let priceDefault = pm.environment.get('priceDefault')\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct')\r",
													"let amount = pm.environment.get('amount')\r",
													"let admin = pm.environment.get('admin')\r",
													"console.log(admin)\r",
													"let user = pm.environment.get('user')\r",
													"console.log(user)\r",
													"\r",
													"\r",
													"//-------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Cadastra usuario\r",
													"let postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefault}`,\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`,\r",
													"            \"administrador\": `${admin}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"//___________________________________________________________________________\r",
													"\r",
													"//Efetua o login do usuario\r",
													"let postRequest2 = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"//___________________________________________________________________________\r",
													"/*\r",
													"//Cadastra novo Produto\r",
													"let postRequest3 = {\r",
													"    url: `${url}/produtos`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': `${token2}`\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefaultProduct}`,\r",
													"            \"preco\": `${priceDefault}`,\r",
													"            \"descricao\": `${descriptionProduct}`,\r",
													"            \"quantidade\": `${amount}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"*/\r",
													"\r",
													"//Cadastra um usuario\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    let res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //atribui o _idUserDefault\r",
													"        pm.environment.set('_idUserDefault', res._id)\r",
													"        console.log(res._id)\r",
													"        \r",
													"        //Efetua o login do usuario\r",
													"        pm.sendRequest(postRequest2, (err, response) => {\r",
													"            let res2 = response.json()\r",
													"            console.log(err ? err : res2);\r",
													"            \r",
													"            try {\r",
													"                //atribui o token \r",
													"                pm.environment.set('token', res2.authorization.slice(7))\r",
													"                console.log(res2.authorization.slice(7))\r",
													"/*\r",
													"                //Cria o produto\r",
													"                pm.sendRequest(postRequest3, (err, response) => {\r",
													"                    let res3 = response.json()\r",
													"                    console.log(err ? err : res3);\r",
													"                    try {\r",
													"                        //operação\r",
													"                        pm.environment.set('_idProduct', res3._id)\r",
													"                        console.log(res3._id)\r",
													"                    } catch {\r",
													"                        //operação\r",
													"                        //console.warn('FAIL')\r",
													"                    }\r",
													"              });\r",
													"*/\r",
													"            } catch {\r",
													"                //operação\r",
													"                //console.warn('FAIL')\r",
													"            }\r",
													"        });\r",
													"    } catch {\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});\r",
													"console.log(\"fim pre-request Deletar Produtos inseridos em carrinho\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"start teste Deletar Produtos inseridos em carrinho\");\r",
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL')\r",
													"let nameDefault = pm.environment.get('nameDefault')\r",
													"let emailDefault = pm.environment.get('emailDefault')\r",
													"let pwsDefault = pm.environment.get('pwsDefault')\r",
													"let idUserDefault = pm.environment.get('_idUserDefault')\r",
													"let idProduto = pm.environment.get('_idProduct')\r",
													"let token = pm.environment.get('token')\r",
													"let token2 = 'Bearer ' + pm.environment.get('token')\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct')\r",
													"let priceDefault = pm.environment.get('priceDefault')\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct')\r",
													"let amount = pm.environment.get('amount')\r",
													"let admin = pm.environment.get('admin')\r",
													"console.log(admin)\r",
													"let user = pm.environment.get('user')\r",
													"console.log(user)\r",
													"\r",
													"\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//verifica se o Body contem os seguintes atributos\r",
													"let atributos = ['message', 'idCarrinhos']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Não é permitido excluir produto que faz parte de carrinho'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Não é permitido excluir produto que faz parte de carrinho\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"//let url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"console.log(\"fim pre-request Deletar Produtos inseridos em carrinho\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos/{{_idProduct1}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{_idProduct1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT08.2 Deletar Produtos token errado",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Start pre-request Deletar Produtos inseridos em carrinho Copy\");\r",
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL')\r",
													"let nameDefault = pm.environment.get('nameDefault')\r",
													"let emailDefault = pm.environment.get('emailDefault')\r",
													"let pwsDefault = pm.environment.get('pwsDefault')\r",
													"let idProduto = pm.environment.get('_idProduct')\r",
													"let token = pm.environment.get('token')\r",
													"let token2 = 'Bearer ' + pm.environment.get('token')\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct')\r",
													"let priceDefault = pm.environment.get('priceDefault')\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct')\r",
													"let amount = pm.environment.get('amount')\r",
													"let admin = pm.environment.get('admin')\r",
													"console.log(admin)\r",
													"let user = pm.environment.get('user')\r",
													"console.log(user)\r",
													"\r",
													"\r",
													"//-------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Cadastra usuario\r",
													"let postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefault}`,\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`,\r",
													"            \"administrador\": `${admin}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"//___________________________________________________________________________\r",
													"\r",
													"//Efetua o login do usuario\r",
													"let postRequest2 = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"//___________________________________________________________________________\r",
													"/*\r",
													"//Cadastra novo Produto\r",
													"let postRequest3 = {\r",
													"    url: `${url}/produtos`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': `${token2}`\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefaultProduct}`,\r",
													"            \"preco\": `${priceDefault}`,\r",
													"            \"descricao\": `${descriptionProduct}`,\r",
													"            \"quantidade\": `${amount}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"*/\r",
													"\r",
													"//Cadastra um usuario\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    let res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //atribui o _idUserDefault\r",
													"        pm.environment.set('_idUserDefault', res._id)\r",
													"        console.log(res._id)\r",
													"        \r",
													"        //Efetua o login do usuario\r",
													"        pm.sendRequest(postRequest2, (err, response) => {\r",
													"            let res2 = response.json()\r",
													"            console.log(err ? err : res2);\r",
													"            \r",
													"            try {\r",
													"                //atribui o token \r",
													"/*FOI ALTERADO O VALOR DO SLICE DE 7 PARA 6*/\r",
													"                pm.environment.set('token', res2.authorization.slice(6))\r",
													"                console.log(res2.authorization.slice(6))\r",
													"/*\r",
													"                //Cria o produto\r",
													"                pm.sendRequest(postRequest3, (err, response) => {\r",
													"                    let res3 = response.json()\r",
													"                    console.log(err ? err : res3);\r",
													"                    try {\r",
													"                        //operação\r",
													"                        pm.environment.set('_idProduct', res3._id)\r",
													"                        console.log(res3._id)\r",
													"                    } catch {\r",
													"                        //operação\r",
													"                        //console.warn('FAIL')\r",
													"                    }\r",
													"              });\r",
													"*/\r",
													"            } catch {\r",
													"                //operação\r",
													"                //console.warn('FAIL')\r",
													"            }\r",
													"        });\r",
													"    } catch {\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});\r",
													"console.log(\"fim pre-request Deletar Produtos inseridos em carrinho Copy\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Start test Deletar Produtos inseridos em carrinho Copy\");\r",
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL')\r",
													"let nameDefault = pm.environment.get('nameDefault')\r",
													"let emailDefault = pm.environment.get('emailDefault')\r",
													"let pwsDefault = pm.environment.get('pwsDefault')\r",
													"let idUserDefault = pm.environment.get('_idUserDefault')\r",
													"let idProduto = pm.environment.get('_idProduct')\r",
													"let token = pm.environment.get('token')\r",
													"let token2 = 'Bearer ' + pm.environment.get('token')\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct')\r",
													"let priceDefault = pm.environment.get('priceDefault')\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct')\r",
													"let amount = pm.environment.get('amount')\r",
													"let admin = pm.environment.get('admin')\r",
													"console.log(admin)\r",
													"let user = pm.environment.get('user')\r",
													"console.log(user)\r",
													"\r",
													"\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 401\", function () {\r",
													"    pm.response.to.have.status(401);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Unauthorized'\", function () {\r",
													"    pm.response.to.have.status('Unauthorized');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//verifica se o Body contem os seguintes atributos\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"//let url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"console.log(\"fim teste Deletar Produtos inseridos em carrinho Copy\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos/{{_idProduct1}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{_idProduct1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT08.3 Deletar Produtos c/ usuario comum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"start pre-request! 'Deletar Produtos c/ usuario comum\");\r",
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL');\r",
													"let nameDefault = pm.environment.get('nameDefault');\r",
													"let emailDefault = pm.environment.get('emailDefault');\r",
													"let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduto = pm.environment.get('_idProduct');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user')\r",
													"console.log(\"URL: \" + url);\r",
													"console.log(\"Nome: \" + nameDefault);\r",
													"console.log(\"Email Cadastrado: \"+ emailDefault);\r",
													"console.log(\"Tipo de Conta 'user': \"+ user);\r",
													"console.log(\"Tipo de conta 'admin': \"+admin);\r",
													"console.log(\"Senha: \"+ pwsDefault);\r",
													"console.log(\"ID do Usuario: \"+idUserDefault)\r",
													"console.log(\"token 1: \"+ token);\r",
													"console.log(\"token 2: \" + token2);\r",
													"console.log(\"Nome do Produto:\" + nameDefaultProduct);\r",
													"console.log(\"Descrição: \"+descriptionProduct);\r",
													"console.log(\"Valor: \"+amount);\r",
													"console.log(\"Preço: \"+priceDefault);\r",
													"console.log(\"ID produto: \"+ idProduto);\r",
													"\r",
													"\r",
													"\r",
													"//-------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//Cadastra usuario\r",
													"let postRequest = {\r",
													"    url: `${url}/usuarios`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefault}`,\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`,\r",
													"            \"administrador\": `${user}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"//___________________________________________________________________________\r",
													"\r",
													"//Efetua o login do usuario\r",
													"let postRequest2 = {\r",
													"    url: `${url}/login`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"email\": `${emailDefault}`,\r",
													"            \"password\": `${pwsDefault}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"//___________________________________________________________________________\r",
													"/*\r",
													"//Cadastra novo Produto\r",
													"let postRequest3 = {\r",
													"    url: `${url}/produtos`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': `${token2}`\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": `${nameDefaultProduct}`,\r",
													"            \"preco\": `${priceDefault}`,\r",
													"            \"descricao\": `${descriptionProduct}`,\r",
													"            \"quantidade\": `${amount}`\r",
													"        })\r",
													"    }\r",
													"}\r",
													"*/\r",
													"\r",
													"//Cadastra um usuario\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    let res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    console.log(\"Cadastra um usuario: \"+ res)\r",
													"    try {\r",
													"        //atribui o _idUserDefault\r",
													"        pm.environment.set('_idUserDefault', res._id)\r",
													"        console.log(\"atribui o _idUserDefault: \"+ res._id)\r",
													"        \r",
													"        //Efetua o login do usuario\r",
													"        pm.sendRequest(postRequest2, (err, response) => {\r",
													"            let res2 = response.json()\r",
													"            console.log(err ? err : res2);\r",
													"            console.log(\"Efetua o login do usuario: \"+ res2.email)\r",
													"            \r",
													"            try {\r",
													"                //atribui o token \r",
													"                pm.environment.set('token', res2.authorization.slice(7))\r",
													"                console.log(\"Atribuiu o token: \"+ res2.authorization.slice(7))\r",
													"\r",
													"/*\r",
													"                //Cria o produto\r",
													"                pm.sendRequest(postRequest3, (err, response) => {\r",
													"                    let res3 = response.json()\r",
													"                    console.log(err ? err : res3);\r",
													"                    try {\r",
													"                        //operação\r",
													"                        pm.environment.set('_idProduct', res3._id)\r",
													"                        console.log(res3._id)\r",
													"                    } catch {\r",
													"                        //operação\r",
													"                        //console.warn('FAIL')\r",
													"                    }\r",
													"              });\r",
													"*/\r",
													"            } catch {\r",
													"                //operação\r",
													"                //console.warn('FAIL')\r",
													"            }\r",
													"        });\r",
													"    } catch {\r",
													"        //operação\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"});\r",
													"console.log(\"Final pre-request Deletar Produtos c/ usuario comum\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"start Test 'Deletar Produtos c/ usuario comum!'\");\r",
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL');\r",
													"let nameDefault = pm.environment.get('nameDefault');\r",
													"let emailDefault = pm.environment.get('emailDefault');\r",
													"let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduto = pm.environment.get('_idProduct');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user')\r",
													"\r",
													"/*\r",
													"console.log(\"URL: \" + url);\r",
													"console.log(\"Nome: \" + nameDefault);\r",
													"console.log(\"Email Cadastrado: \"+ emailDefault);\r",
													"console.log(\"Tipo de Conta 'user': \"+ user);\r",
													"console.log(\"Tipo de conta 'admin': \"+admin);\r",
													"console.log(\"Senha: \"+ pwsDefault);\r",
													"console.log(\"ID do Usuario: \"+idUserDefault)\r",
													"console.log(\"token 1: \"+ token);\r",
													"console.log(\"token 2: \" + token2);\r",
													"console.log(\"Nome do Produto:\" + nameDefaultProduct);\r",
													"console.log(\"Descrição: \"+descriptionProduct);\r",
													"console.log(\"Valor: \"+amount);\r",
													"console.log(\"Preço: \"+priceDefault);\r",
													"console.log(\"ID produto: \"+ idProduto);\r",
													"console.log(\"--------------------------------------//--------------------------------------\");\r",
													"*/\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 403\", function () {\r",
													"    pm.response.to.have.status(403);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Forbidden'\", function () {\r",
													"    pm.response.to.have.status('Forbidden');\r",
													"});\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//verifica se o Body contem os seguintes atributos\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Rota exclusiva para administradores'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
													"});\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"//let url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    console.log(\"Excluindo o usuario criado: \"+ delUser)\r",
													"\r",
													"})\r",
													"//exibe lista de uruario \r",
													"let  listUser = {\r",
													"    url: `${url}/usuarios` ,   //variavel\r",
													"    method: 'GET',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(listUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    console.log(\"Info sobre usuario: \"+ listUser);\r",
													"\r",
													"})\r",
													"console.log(\"Final test!Deletar Produtos c/ usuario comum\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos/{{_idProduct1}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{_idProduct1}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CT12- validar rota de listagem de Produto",
							"item": [
								{
									"name": "CT12 Lista Produtos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"/*\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Já existe produto com esse nome'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
													"});\r",
													"*/\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['quantidade','produtos']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT12.1 Lista Produtos c/ {_id}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*\r",
													"//atribui variavel a idProduct\r",
													"let respID = pm.response.json()\r",
													"pm.environment.set(\"_idProduct\", respID._id);\r",
													"console.log(respID._id);\r",
													"*/\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"/*\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Cadastro realizado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"*/\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['preco', 'descricao', 'quantidade', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"/*\r",
													"try {\r",
													"    \r",
													"    //Excluir produto cadastrado\r",
													"    let url = pm.environment.get('baseURL')\r",
													"    let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"    let token = 'Bearer ' + pm.environment.get('token')\r",
													"    console.log(pm.environment.get('token'))\r",
													"\r",
													"    let delProduct = {\r",
													"        url: `${url}/produtos/${idProduct}`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': `${token}`\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(delProduct, (err, response) => {\r",
													"        console.log(err ? err : response.json());\r",
													"    })\r",
													"    try {\r",
													" */       //Excluindo o usuario criado\r",
													"        url = pm.environment.get('baseURL');\r",
													"        let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"        let delUser = {\r",
													"            url: `${url}/usuarios/${idUserDefault}`,   //variavel\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        pm.sendRequest(delUser, (err, response) => {\r",
													"            console.log(err ? err : response.json());\r",
													"        })\r",
													" /*   } catch {\r",
													"        console.warn('Falha ao excluir usuario')\r",
													"    }\r",
													"} catch { console.warn('Falha ao deletar produto') }\r",
													"*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"start pre-request Deletar Produtos c/ êxito Copy\")\r",
													"\r",
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL');\r",
													"let nameDefault = pm.environment.get('nameDefault');\r",
													"let emailDefault = pm.environment.get('emailDefault');\r",
													"let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduto = pm.environment.get('_idProduct');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user')\r",
													"/*\r",
													"console.log(\"URL: \" + url);\r",
													"console.log(\"Nome: \" + nameDefault);\r",
													"console.log(\"Email Cadastrado: \" + emailDefault);\r",
													"console.log(\"Tipo de Conta 'user': \" + user);\r",
													"console.log(\"Tipo de conta 'admin': \" + admin);\r",
													"console.log(\"Senha: \" + pwsDefault);\r",
													"console.log(\"ID do Usuario: \" + idUserDefault)\r",
													"console.log(\"token 1: \" + token);\r",
													"console.log(\"token 2: \" + token2);\r",
													"console.log(\"Nome do Produto:\" + nameDefaultProduct);\r",
													"console.log(\"Descrição: \" + descriptionProduct);\r",
													"console.log(\"Valor: \" + amount);\r",
													"console.log(\"Preço: \" + priceDefault);\r",
													"console.log(\"ID produto: \" + idProduto);\r",
													"*/\r",
													"//exibe lista de uruario \r",
													"const listUser = {\r",
													"    url: `${url}/usuarios`,   //variavel\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(listUser, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    console.log(\"Info sobre usuario: \" + listUser);\r",
													"\r",
													"})\r",
													"\r",
													"console.log(\"--------------------------------------//--------------------------------------\");\r",
													"\r",
													"\r",
													"try {\r",
													"    //Cadastra um usuario\r",
													"    let postRequest = {\r",
													"        url: `${url}/usuarios`, //variavel\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                \"nome\": `${nameDefault}`,\r",
													"                \"email\": `${emailDefault}`,\r",
													"                \"password\": `${pwsDefault}`,\r",
													"                \"administrador\": `${admin}`\r",
													"            })\r",
													"        }\r",
													"    }\r",
													"    pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res);\r",
													"        pm.environment.set('_idUserDefault', res._id)\r",
													"        console.log(res._id)\r",
													"\r",
													"        try {\r",
													"            //Efetua o login do usuario\r",
													"            let postRequest2 = {\r",
													"                url: `${url}/login`, //variavel\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                    mode: 'raw',\r",
													"                    raw: JSON.stringify({\r",
													"                        \"email\": `${emailDefault}`,\r",
													"                        \"password\": `${pwsDefault}`\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"\r",
													"            pm.sendRequest(postRequest2, (err, response) => {\r",
													"                const res2 = response.json()\r",
													"                console.log(err ? err : res2);\r",
													"                pm.environment.set('token', res2.authorization.slice(7))\r",
													"                console.log(res2.authorization.slice(7))\r",
													"\r",
													"/*\r",
													"                try {\r",
													"                    //Cria o produto\r",
													"                    let postRequest3 = {\r",
													"                        url: `${url}/produtos`, //variavel\r",
													"                        method: 'POST',\r",
													"                        header: {\r",
													"                            'Content-Type': 'application/json',\r",
													"                            'Authorization': `${token2}`\r",
													"                        },\r",
													"                        body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: JSON.stringify({\r",
													"                                \"nome\": `${nameDefaultProduct}`,\r",
													"                                \"preco\": `${priceDefault}`,\r",
													"                                \"descricao\": `${descriptionProduct}`,\r",
													"                                \"quantidade\": `${amount}`\r",
													"                            })\r",
													"                        }\r",
													"                    }\r",
													"\r",
													"                    pm.sendRequest(postRequest3, (err, response) => {\r",
													"                        let res3 = response.json()\r",
													"                        console.log(err ? err : res3);\r",
													"                        pm.environment.set('_idProduct', res3._id)\r",
													"                        console.log(res3._id)\r",
													"                    })\r",
													"\r",
													"                }\r",
													"                catch { console.warn('ERRO \"_idProduct\"') } */\r",
													"            })\r",
													"        }\r",
													"        catch { console.warn('ERRO \"token\"') }\r",
													"    })\r",
													"}\r",
													"\r",
													"catch { console.warn('ERRO \"_idUserDefault\"') }\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos/{{_idProduct1}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{_idProduct1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT12.2 Lista Produto inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*\r",
													"//atribui variavel a idProduct\r",
													"let respID = pm.response.json()\r",
													"pm.environment.set(\"_idProduct\", respID._id);\r",
													"console.log(respID._id);\r",
													"*/\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"/*\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Cadastro realizado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"*/\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"/*\r",
													"try {\r",
													"    \r",
													"    //Excluir produto cadastrado\r",
													"    let url = pm.environment.get('baseURL')\r",
													"    let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"    let token = 'Bearer ' + pm.environment.get('token')\r",
													"    console.log(pm.environment.get('token'))\r",
													"\r",
													"    let delProduct = {\r",
													"        url: `${url}/produtos/${idProduct}`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': `${token}`\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(delProduct, (err, response) => {\r",
													"        console.log(err ? err : response.json());\r",
													"    })\r",
													"    try {\r",
													" */       //Excluindo o usuario criado\r",
													"        url = pm.environment.get('baseURL');\r",
													"        let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"        let delUser = {\r",
													"            url: `${url}/usuarios/${idUserDefault}`,   //variavel\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        pm.sendRequest(delUser, (err, response) => {\r",
													"            console.log(err ? err : response.json());\r",
													"        })\r",
													" /*   } catch {\r",
													"        console.warn('Falha ao excluir usuario')\r",
													"    }\r",
													"} catch { console.warn('Falha ao deletar produto') }\r",
													"*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"start pre-request Deletar Produtos c/ êxito Copy\")\r",
													"\r",
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL');\r",
													"let nameDefault = pm.environment.get('nameDefault');\r",
													"let emailDefault = pm.environment.get('emailDefault');\r",
													"let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduto = pm.environment.get('_idProduct');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user')\r",
													"/*\r",
													"console.log(\"URL: \" + url);\r",
													"console.log(\"Nome: \" + nameDefault);\r",
													"console.log(\"Email Cadastrado: \" + emailDefault);\r",
													"console.log(\"Tipo de Conta 'user': \" + user);\r",
													"console.log(\"Tipo de conta 'admin': \" + admin);\r",
													"console.log(\"Senha: \" + pwsDefault);\r",
													"console.log(\"ID do Usuario: \" + idUserDefault)\r",
													"console.log(\"token 1: \" + token);\r",
													"console.log(\"token 2: \" + token2);\r",
													"console.log(\"Nome do Produto:\" + nameDefaultProduct);\r",
													"console.log(\"Descrição: \" + descriptionProduct);\r",
													"console.log(\"Valor: \" + amount);\r",
													"console.log(\"Preço: \" + priceDefault);\r",
													"console.log(\"ID produto: \" + idProduto);\r",
													"*/\r",
													"//exibe lista de uruario \r",
													"const listUser = {\r",
													"    url: `${url}/usuarios`,   //variavel\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(listUser, (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    console.log(\"Info sobre usuario: \" + listUser);\r",
													"\r",
													"})\r",
													"\r",
													"console.log(\"--------------------------------------//--------------------------------------\");\r",
													"\r",
													"\r",
													"try {\r",
													"    //Cadastra um usuario\r",
													"    let postRequest = {\r",
													"        url: `${url}/usuarios`, //variavel\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                \"nome\": `${nameDefault}`,\r",
													"                \"email\": `${emailDefault}`,\r",
													"                \"password\": `${pwsDefault}`,\r",
													"                \"administrador\": `${admin}`\r",
													"            })\r",
													"        }\r",
													"    }\r",
													"    pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res);\r",
													"        pm.environment.set('_idUserDefault', res._id)\r",
													"        console.log(res._id)\r",
													"\r",
													"        try {\r",
													"            //Efetua o login do usuario\r",
													"            let postRequest2 = {\r",
													"                url: `${url}/login`, //variavel\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                    mode: 'raw',\r",
													"                    raw: JSON.stringify({\r",
													"                        \"email\": `${emailDefault}`,\r",
													"                        \"password\": `${pwsDefault}`\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"\r",
													"            pm.sendRequest(postRequest2, (err, response) => {\r",
													"                const res2 = response.json()\r",
													"                console.log(err ? err : res2);\r",
													"                pm.environment.set('token', res2.authorization.slice(7))\r",
													"                console.log(res2.authorization.slice(7))\r",
													"\r",
													"/*\r",
													"                try {\r",
													"                    //Cria o produto\r",
													"                    let postRequest3 = {\r",
													"                        url: `${url}/produtos`, //variavel\r",
													"                        method: 'POST',\r",
													"                        header: {\r",
													"                            'Content-Type': 'application/json',\r",
													"                            'Authorization': `${token2}`\r",
													"                        },\r",
													"                        body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: JSON.stringify({\r",
													"                                \"nome\": `${nameDefaultProduct}`,\r",
													"                                \"preco\": `${priceDefault}`,\r",
													"                                \"descricao\": `${descriptionProduct}`,\r",
													"                                \"quantidade\": `${amount}`\r",
													"                            })\r",
													"                        }\r",
													"                    }\r",
													"\r",
													"                    pm.sendRequest(postRequest3, (err, response) => {\r",
													"                        let res3 = response.json()\r",
													"                        console.log(err ? err : res3);\r",
													"                        pm.environment.set('_idProduct', res3._id)\r",
													"                        console.log(res3._id)\r",
													"                    })\r",
													"\r",
													"                }\r",
													"                catch { console.warn('ERRO \"_idProduct\"') } */\r",
													"            })\r",
													"        }\r",
													"        catch { console.warn('ERRO \"token\"') }\r",
													"    })\r",
													"}\r",
													"\r",
													"catch { console.warn('ERRO \"_idUserDefault\"') }\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos/{{_idProductNOT}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{_idProductNOT}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/carrinho",
					"item": [
						{
							"name": "CT13- validar rota de listagem de Carrinho",
							"item": [
								{
									"name": "CT13 Lista Carrinhos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"/*\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"quantidade\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
													"});\r",
													"*/\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['quantidade', 'carrinhos']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT13.1 Lista Carrinhos c/ {_id)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"/*\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Registro excluído com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
													"});\r",
													"*/\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['produtos']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carrinhos/{{_idCartD}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"{{_idCartD}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CT03- validar rota de  Cadastro de Carrinho",
							"item": [
								{
									"name": "CT03.1 Cadastra Usuario/Produto  > c/ Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL');\r",
													"let nameDefault = pm.environment.get('nameDefault');\r",
													"let emailDefault = pm.environment.get('emailDefault');\r",
													"//let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduto = pm.environment.get('_idProduct');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user')\r",
													"\r",
													"try {\r",
													"    //Cadastra um usuario\r",
													"    let postRequest = {\r",
													"        url: `${url}/usuarios`, //variavel\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                \"nome\": `${nameDefault}`,\r",
													"                \"email\": `${emailDefault}`,\r",
													"                \"password\": `${pwsDefault}`,\r",
													"                \"administrador\": `${admin}`\r",
													"            })\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(postRequest, (err, response) => {\r",
													"        let resCad = response.json()\r",
													"        console.log(err ? err : resCad);\r",
													"\r",
													"        try {\r",
													"            pm.environment.set('_idUserDefault', resCad._id)\r",
													"            console.log(resCad._id)\r",
													"        }\r",
													"        catch { console.warn(\"falha ao enviar id\") }\r",
													"\r",
													"\r",
													"        try {\r",
													"            //Efetua o login do usuario\r",
													"            let postRequest2 = {\r",
													"                url: `${url}/login`, //variavel\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                    mode: 'raw',\r",
													"                    raw: JSON.stringify({\r",
													"                        \"email\": `${emailDefault}`,\r",
													"                        \"password\": `${pwsDefault}`\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"\r",
													"            pm.sendRequest(postRequest2, (err, response) => {\r",
													"                const res2 = response.json()\r",
													"                console.log(err ? err : res2);\r",
													"                try {\r",
													"                    pm.environment.set('token', res2.authorization.slice(7))\r",
													"                    console.log(res2.authorization.slice(7))\r",
													"                }\r",
													"                catch { console.warn(\"falha ao enviar id\") }\r",
													"\r",
													"\r",
													"\r",
													"/*                try { //Neste caso não é nescessario criar novo produto \r",
													"                    //Cria o produto\r",
													"                    let postRequest3 = {\r",
													"                        url: `${url}/produtos`, //variavel\r",
													"                        method: 'POST',\r",
													"                        header: {\r",
													"                            'Content-Type': 'application/json',\r",
													"                            'Authorization': `${token2}`\r",
													"                        },\r",
													"                        body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: JSON.stringify({\r",
													"                                \"nome\": `${nameDefaultProduct}`,\r",
													"                                \"preco\": `${priceDefault}`,\r",
													"                                \"descricao\": `${descriptionProduct}`,\r",
													"                                \"quantidade\": `${amount}`\r",
													"                            })\r",
													"                        }\r",
													"                    }\r",
													"\r",
													"                    pm.sendRequest(postRequest3, (err, response) => {\r",
													"                        let res3 = response.json()\r",
													"                        console.log(err ? err : res3);\r",
													"                        pm.environment.set('_idProduct', res3._id)\r",
													"                        console.log(res3._id)\r",
													"                    })\r",
													"\r",
													"                }\r",
													"                catch {\r",
													"                    console.warn('ERRO \"_idProduct\"')\r",
													"                }\r",
													"*/            })\r",
													"        }\r",
													"        catch {\r",
													"            console.warn('ERRO \"token\"')\r",
													"        }\r",
													"    })\r",
													"}\r",
													"\r",
													"catch {\r",
													"    //console.warn('ERRO \"_idUserDefault\"') \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respIdProduct = pm.response.json()\r",
													"pm.environment.set(\"_idProduct\", respIdProduct._id); \r",
													"//console.log(respID._id);\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 201\", function () {\r",
													"    pm.response.to.have.status(201);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
													"    pm.response.to.have.status('Created');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Cadastro realizado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"/*\r",
													"//Excluir produto cadastrado\r",
													"\r",
													"let url = pm.environment.get('baseURL')\r",
													"let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"console.log(pm.environment.get('token'))\r",
													"\r",
													"  let deleteUser = {\r",
													"    url:`${url}/produtos/${idProduct}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(deleteUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"//_________________________________________________________________________\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"/*\r",
													"//Limpar as variaveis _idProduct, token e _idUserDefault\r",
													"pm.environment.set(\"_idProduct\", \"\");\r",
													"pm.environment.set(\"token\", \"\");\r",
													"pm.environment.set(\"_idUserDefault\", \"\");\r",
													"*/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{SSD 1TB}\",\r\n  \"preco\": 600,\r\n  \"descricao\": \"SSD Sata3\",\r\n  \"quantidade\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT03.2 Cadastra Carrinho c/ Produto Duplicado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*//atribui variavel a idProduct\r",
													"let respIDcarrinho = pm.response.json()\r",
													"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
													"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
													"*/\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Não é permitido possuir produto duplicado'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Não é permitido possuir produto duplicado\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message', 'idProdutosDuplicados']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"/*\r",
													"try {\r",
													"    //Excluir carrinho cadastrado\r",
													"\r",
													"    let url = pm.environment.get('baseURL')\r",
													"    //let idcarrinho = pm.environment.get('_idCart1')\r",
													"\r",
													"    let token = 'Bearer ' + pm.environment.get('token')\r",
													"    console.log(pm.environment.get('token'))\r",
													"    //console.log(\"tentando deletar este produto: \" + idcarrinho)\r",
													"\r",
													"    let deleteCar = {\r",
													"        url: `${url}/carrinhos/cancelar-compra`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': `${token}`\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(deleteCar, (err, response) => {\r",
													"        console.log(err ? err : response.json());\r",
													"    })\r",
													"\r",
													"    try {\r",
													"        //Excluir produto cadastrado\r",
													"\r",
													"        let url1 = pm.environment.get('baseURL')\r",
													"        let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"        let token1 = 'Bearer ' + pm.environment.get('token')\r",
													"        console.log(pm.environment.get('token'))\r",
													"        console.log(\"tentando deletar este produto: \" + idProduct)\r",
													"\r",
													"        let deleteUser = {\r",
													"            url: `${url1}/produtos/${idProduct}`,\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': `${token1}`\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        pm.sendRequest(deleteUser, (err, response) => {\r",
													"            console.log(err ? err : response.json());\r",
													"        })\r",
													"\r",
													"        try {\r",
													"\r",
													"            //Excluindo o usuario criado\r",
													"            url2 = pm.environment.get('baseURL');\r",
													"            let idUserDefault1 = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"            let delUser1 = {\r",
													"                url: `${url2}/usuarios/${idUserDefault1}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"\r",
													"                }\r",
													"            }\r",
													"\r",
													"            pm.sendRequest(delUser1, (err, response) => {\r",
													"                console.log(err ? err : response.json());\r",
													"            })\r",
													"        } catch { }\r",
													"\r",
													"    } catch { }\r",
													"\r",
													"}\r",
													"catch { }\r",
													"\r",
													"*/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_idProduct}}\",\r\n      \"quantidade\": 2\r\n    },\r\n    {\r\n      \"idProduto\": \"{{_idProduct}}\",\r\n      \"quantidade\": 2\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT03.3 Cadastra Carrinho c/ Produto qtd maior que estoque",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*//atribui variavel a idProduct\r",
													"let respIDcarrinho = pm.response.json()\r",
													"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
													"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
													"*/\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Produto não possui quantidade suficiente'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Produto não possui quantidade suficiente\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message', 'item']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"/*\r",
													"try {\r",
													"    //Excluir carrinho cadastrado\r",
													"\r",
													"    let url = pm.environment.get('baseURL')\r",
													"    //let idcarrinho = pm.environment.get('_idCart1')\r",
													"\r",
													"    let token = 'Bearer ' + pm.environment.get('token')\r",
													"    console.log(pm.environment.get('token'))\r",
													"    //console.log(\"tentando deletar este produto: \" + idcarrinho)\r",
													"\r",
													"    let deleteCar = {\r",
													"        url: `${url}/carrinhos/cancelar-compra`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': `${token}`\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(deleteCar, (err, response) => {\r",
													"        console.log(err ? err : response.json());\r",
													"    })\r",
													"\r",
													"    try {\r",
													"        //Excluir produto cadastrado\r",
													"\r",
													"        let url1 = pm.environment.get('baseURL')\r",
													"        let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"        let token1 = 'Bearer ' + pm.environment.get('token')\r",
													"        console.log(pm.environment.get('token'))\r",
													"        console.log(\"tentando deletar este produto: \" + idProduct)\r",
													"\r",
													"        let deleteUser = {\r",
													"            url: `${url1}/produtos/${idProduct}`,\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': `${token1}`\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        pm.sendRequest(deleteUser, (err, response) => {\r",
													"            console.log(err ? err : response.json());\r",
													"        })\r",
													"\r",
													"        try {\r",
													"\r",
													"            //Excluindo o usuario criado\r",
													"            url2 = pm.environment.get('baseURL');\r",
													"            let idUserDefault1 = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"            let delUser1 = {\r",
													"                url: `${url2}/usuarios/${idUserDefault1}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"\r",
													"                }\r",
													"            }\r",
													"\r",
													"            pm.sendRequest(delUser1, (err, response) => {\r",
													"                console.log(err ? err : response.json());\r",
													"            })\r",
													"        } catch { }\r",
													"\r",
													"    } catch { }\r",
													"\r",
													"}\r",
													"catch { }\r",
													"\r",
													"*/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_idProduct}}\",\r\n      \"quantidade\": 10\r\n    },\r\n    {\r\n      \"idProduto\": \"{{_idProduct1}}\",\r\n      \"quantidade\": 10\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT03.4 Cadastra Carrinho c/ token inesistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*\r",
													"//atribui variavel a idProduct\r",
													"let respIDcarrinho = pm.response.json()\r",
													"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
													"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
													"*/\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Unauthorized'\", function () {\r",
													"    pm.response.to.have.status('Unauthorized');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"/*\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
													"});\r",
													"*/\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"/*\r",
													"try {\r",
													"    //Excluir carrinho cadastrado\r",
													"\r",
													"    let url = pm.environment.get('baseURL')\r",
													"    //let idcarrinho = pm.environment.get('_idCart1')\r",
													"\r",
													"    let token = 'Bearer ' + pm.environment.get('token')\r",
													"    console.log(pm.environment.get('token'))\r",
													"    //console.log(\"tentando deletar este produto: \" + idcarrinho)\r",
													"\r",
													"    let deleteCar = {\r",
													"        url: `${url}/carrinhos/cancelar-compra`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': `${token}`\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(deleteCar, (err, response) => {\r",
													"        console.log(err ? err : response.json());\r",
													"    })\r",
													"\r",
													"    try {\r",
													"        //Excluir produto cadastrado\r",
													"\r",
													"        let url1 = pm.environment.get('baseURL')\r",
													"        let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"        let token1 = 'Bearer ' + pm.environment.get('token')\r",
													"        console.log(pm.environment.get('token'))\r",
													"        console.log(\"tentando deletar este produto: \" + idProduct)\r",
													"\r",
													"        let deleteUser = {\r",
													"            url: `${url1}/produtos/${idProduct}`,\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': `${token1}`\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        pm.sendRequest(deleteUser, (err, response) => {\r",
													"            console.log(err ? err : response.json());\r",
													"        })\r",
													"\r",
													"        try {\r",
													"\r",
													"            //Excluindo o usuario criado\r",
													"            url2 = pm.environment.get('baseURL');\r",
													"            let idUserDefault1 = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"            let delUser1 = {\r",
													"                url: `${url2}/usuarios/${idUserDefault1}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"\r",
													"                }\r",
													"            }\r",
													"\r",
													"            pm.sendRequest(delUser1, (err, response) => {\r",
													"                console.log(err ? err : response.json());\r",
													"            })\r",
													"        } catch { }\r",
													"\r",
													"    } catch { }\r",
													"\r",
													"}\r",
													"catch { }\r",
													"*/\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenErr}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_idProduct}}\",\r\n      \"quantidade\": 2\r\n    },\r\n    {\r\n      \"idProduto\": \"{{_idProduct2}}\",\r\n      \"quantidade\": 2\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT03 Cadastra Carrinho c/ êxito",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*\r",
													"//atribui variavel a idProduct\r",
													"let respIDcarrinho = pm.response.json()\r",
													"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
													"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
													"*/\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
													"    pm.response.to.have.status('Created');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"/*\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
													"});\r",
													"*/\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"    //Excluir carrinho cadastrado\r",
													"\r",
													"    let url = pm.environment.get('baseURL')\r",
													"    //let idcarrinho = pm.environment.get('_idCart1')\r",
													"\r",
													"    let token = 'Bearer ' + pm.environment.get('token')\r",
													"    console.log(pm.environment.get('token'))\r",
													"    //console.log(\"tentando deletar este produto: \" + idcarrinho)\r",
													"\r",
													"    let deleteCar = {\r",
													"        url: `${url}/carrinhos/cancelar-compra`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': `${token}`\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(deleteCar, (err, response) => {\r",
													"        console.log(err ? err : response.json());\r",
													"    })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 2\r\n    },\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 2\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deleta Produto e usuario",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*\r",
													"//atribui variavel a idProduct\r",
													"let respID = pm.response.json()\r",
													"pm.environment.set(\"_idProduct\", respID._id);\r",
													"*/\r",
													"/*\r",
													"//console.log(respID._id);\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Registro excluído com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"*/\r",
													"//Excluindo o usuario criado\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos/{{_idProduct}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{_idProduct}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CT09- validar rota de  conclusão de compra do carrinho",
							"item": [
								{
									"name": "Cadastra Usuario/Produto  > c/ Login Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL');\r",
													"let nameDefault = pm.environment.get('nameDefault');\r",
													"let emailDefault = pm.environment.get('emailDefault');\r",
													"//let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduto = pm.environment.get('_idProduct');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user')\r",
													"\r",
													"try {\r",
													"    //Cadastra um usuario\r",
													"    let postRequest = {\r",
													"        url: `${url}/usuarios`, //variavel\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                \"nome\": `${nameDefault}`,\r",
													"                \"email\": `${emailDefault}`,\r",
													"                \"password\": `${pwsDefault}`,\r",
													"                \"administrador\": `${admin}`\r",
													"            })\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(postRequest, (err, response) => {\r",
													"        let resCad = response.json()\r",
													"        console.log(err ? err : resCad);\r",
													"\r",
													"        try {\r",
													"            pm.environment.set('_idUserDefault', resCad._id)\r",
													"            console.log(resCad._id)\r",
													"        }\r",
													"        catch { console.warn(\"falha ao enviar id\") }\r",
													"\r",
													"\r",
													"        try {\r",
													"            //Efetua o login do usuario\r",
													"            let postRequest2 = {\r",
													"                url: `${url}/login`, //variavel\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                    mode: 'raw',\r",
													"                    raw: JSON.stringify({\r",
													"                        \"email\": `${emailDefault}`,\r",
													"                        \"password\": `${pwsDefault}`\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"\r",
													"            pm.sendRequest(postRequest2, (err, response) => {\r",
													"                const res2 = response.json()\r",
													"                console.log(err ? err : res2);\r",
													"                try {\r",
													"                    pm.environment.set('token', res2.authorization.slice(7))\r",
													"                    console.log(res2.authorization.slice(7))\r",
													"                }\r",
													"                catch { console.warn(\"falha ao enviar id\") }\r",
													"\r",
													"\r",
													"\r",
													"/*                try { //Neste caso não é nescessario criar novo produto \r",
													"                    //Cria o produto\r",
													"                    let postRequest3 = {\r",
													"                        url: `${url}/produtos`, //variavel\r",
													"                        method: 'POST',\r",
													"                        header: {\r",
													"                            'Content-Type': 'application/json',\r",
													"                            'Authorization': `${token2}`\r",
													"                        },\r",
													"                        body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: JSON.stringify({\r",
													"                                \"nome\": `${nameDefaultProduct}`,\r",
													"                                \"preco\": `${priceDefault}`,\r",
													"                                \"descricao\": `${descriptionProduct}`,\r",
													"                                \"quantidade\": `${amount}`\r",
													"                            })\r",
													"                        }\r",
													"                    }\r",
													"\r",
													"                    pm.sendRequest(postRequest3, (err, response) => {\r",
													"                        let res3 = response.json()\r",
													"                        console.log(err ? err : res3);\r",
													"                        pm.environment.set('_idProduct', res3._id)\r",
													"                        console.log(res3._id)\r",
													"                    })\r",
													"\r",
													"                }\r",
													"                catch {\r",
													"                    console.warn('ERRO \"_idProduct\"')\r",
													"                }\r",
													"*/            })\r",
													"        }\r",
													"        catch {\r",
													"            console.warn('ERRO \"token\"')\r",
													"        }\r",
													"    })\r",
													"}\r",
													"\r",
													"catch {\r",
													"    //console.warn('ERRO \"_idUserDefault\"') \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respIdProduct = pm.response.json()\r",
													"pm.environment.set(\"_idProduct\", respIdProduct._id); \r",
													"//console.log(respID._id);\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 201\", function () {\r",
													"    pm.response.to.have.status(201);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
													"    pm.response.to.have.status('Created');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Cadastro realizado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"/*\r",
													"//Excluir produto cadastrado\r",
													"\r",
													"let url = pm.environment.get('baseURL')\r",
													"let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"console.log(pm.environment.get('token'))\r",
													"\r",
													"  let deleteUser = {\r",
													"    url:`${url}/produtos/${idProduct}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(deleteUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"//_________________________________________________________________________\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"/*\r",
													"//Limpar as variaveis _idProduct, token e _idUserDefault\r",
													"pm.environment.set(\"_idProduct\", \"\");\r",
													"pm.environment.set(\"token\", \"\");\r",
													"pm.environment.set(\"_idUserDefault\", \"\");\r",
													"*/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{SSD 1TB}\",\r\n  \"preco\": 600,\r\n  \"descricao\": \"SSD Sata3\",\r\n  \"quantidade\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT09.2 Concluir Compra Carrinho Vazio",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"/*\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
													"});\r",
													"*/\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carrinhos/concluir-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"concluir-compra"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT09.1 Concluir Compra c/ token inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respIDcarrinho = pm.response.json()\r",
													"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
													"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Unauthorized'\", function () {\r",
													"    pm.response.to.have.status('Unauthorized');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"try { \r",
													"    //Excluir carrinho cadastrado\r",
													"\r",
													"    let url = pm.environment.get('baseURL')\r",
													"    //let idcarrinho = pm.environment.get('_idCart1')\r",
													"\r",
													"    let token = 'Bearer ' + pm.environment.get('token')\r",
													"    console.log(pm.environment.get('token'))\r",
													"    //console.log(\"tentando deletar este produto: \" + idcarrinho)\r",
													"\r",
													"    let deleteCar = {\r",
													"        url: `${url}/carrinhos/cancelar-compra`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': `${token}`\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(deleteCar, (err, response) => {\r",
													"        console.log(err ? err : response.json());\r",
													"    })\r",
													"\r",
													"    try {\r",
													"        /*\r",
													"        //Excluir produto cadastrado\r",
													"\r",
													"        let url1 = pm.environment.get('baseURL')\r",
													"        let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"        let token1 = 'Bearer ' + pm.environment.get('token')\r",
													"        console.log(pm.environment.get('token'))\r",
													"        console.log(\"tentando deletar este produto: \" + idProduct)\r",
													"\r",
													"        let deleteProdct = {\r",
													"            url: `${url1}/produtos/${idProduct}`,\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': `${token1}`\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        pm.sendRequest(deleteProdct, (err, response) => {\r",
													"            console.log(err ? err : response.json());\r",
													"        })\r",
													"*/\r",
													"        try {\r",
													"/*\r",
													"            //Excluindo o usuario criado\r",
													"            const url = pm.environment.get('baseURL');\r",
													"            const id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"            const delUser = {\r",
													"                url: `${url}/usuarios/${id}`,   //variavel\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"\r",
													"                }\r",
													"            }\r",
													"\r",
													"            pm.sendRequest(delUser, (err, response) => {\r",
													"                console.log(err ? err : response.json());\r",
													"            })\r",
													"*/\r",
													"\r",
													"        \r",
													"    } catch { }\r",
													"\r",
													"} catch { }\r",
													"\r",
													"}\r",
													"catch { }\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//let emailDefault = pm.environment.get('emailDefault');\r",
													"//let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduct = pm.environment.get('_idProduct');\r",
													"let idProduct1 = pm.environment.get('_idProduct1');\r",
													"let idProduct2 = pm.environment.get('_idProduct2');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user');\r",
													"let url = pm.environment.get('baseURL');\r",
													"//Cadastra um usuario\r",
													"let postRequest = {\r",
													"    url: `${url}/carrinhos`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': `${token2}`\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"produtos\": [\r",
													"                {\r",
													"                    \"idProduto\": `${idProduct1}`,\r",
													"                    \"quantidade\": 2\r",
													"                },\r",
													"                {\r",
													"                    \"idProduto\": `${idProduct2}`,\r",
													"                    \"quantidade\": 2\r",
													"                }\r",
													"            ]\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    let resCad = response.json()\r",
													"    console.log(err ? err : resCad);\r",
													"\r",
													"    try {\r",
													"        pm.environment.set('_idCart1', resCad._id)\r",
													"        console.log(resCad._id)\r",
													"    }\r",
													"    catch { console.warn(\"falha ao enviar id\") }\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenErr}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carrinhos/concluir-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"concluir-compra"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT09 Concluir Compra",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respIDcarrinho = pm.response.json()\r",
													"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
													"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"/*\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
													"});\r",
													"*/\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"try { /*\r",
													"    //Excluir carrinho cadastrado\r",
													"\r",
													"    let url = pm.environment.get('baseURL')\r",
													"    //let idcarrinho = pm.environment.get('_idCart1')\r",
													"\r",
													"    let token = 'Bearer ' + pm.environment.get('token')\r",
													"    console.log(pm.environment.get('token'))\r",
													"    //console.log(\"tentando deletar este produto: \" + idcarrinho)\r",
													"\r",
													"    let deleteCar = {\r",
													"        url: `${url}/carrinhos/cancelar-compra`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': `${token}`\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(deleteCar, (err, response) => {\r",
													"        console.log(err ? err : response.json());\r",
													"    })\r",
													"*/\r",
													"    try {\r",
													"        //Excluir produto cadastrado\r",
													"\r",
													"        let url1 = pm.environment.get('baseURL')\r",
													"        let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"        let token1 = 'Bearer ' + pm.environment.get('token')\r",
													"        console.log(pm.environment.get('token'))\r",
													"        console.log(\"tentando deletar este produto: \" + idProduct)\r",
													"\r",
													"        let deleteProdct = {\r",
													"            url: `${url1}/produtos/${idProduct}`,\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': `${token1}`\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        pm.sendRequest(deleteProdct, (err, response) => {\r",
													"            console.log(err ? err : response.json());\r",
													"        })\r",
													"\r",
													"        try {\r",
													"\r",
													"            //Excluindo o usuario criado\r",
													"            const url = pm.environment.get('baseURL');\r",
													"            const id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"            const delUser = {\r",
													"                url: `${url}/usuarios/${id}`,   //variavel\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"\r",
													"                }\r",
													"            }\r",
													"\r",
													"            pm.sendRequest(delUser, (err, response) => {\r",
													"                console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"            })\r",
													"\r",
													"\r",
													"        \r",
													"    } catch { }\r",
													"\r",
													"} catch { }\r",
													"\r",
													"}\r",
													"catch { }\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//let emailDefault = pm.environment.get('emailDefault');\r",
													"//let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduct = pm.environment.get('_idProduct');\r",
													"let idProduct1 = pm.environment.get('_idProduct1');\r",
													"let idProduct2 = pm.environment.get('_idProduct2');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user');\r",
													"let url = pm.environment.get('baseURL');\r",
													"//Cadastra um usuario\r",
													"let postRequest = {\r",
													"    url: `${url}/carrinhos`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': `${token2}`\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"produtos\": [\r",
													"                {\r",
													"                    \"idProduto\": `${idProduct1}`,\r",
													"                    \"quantidade\": 2\r",
													"                },\r",
													"                {\r",
													"                    \"idProduto\": `${idProduct2}`,\r",
													"                    \"quantidade\": 2\r",
													"                }\r",
													"            ]\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    let resCad = response.json()\r",
													"    console.log(err ? err : resCad);\r",
													"\r",
													"    try {\r",
													"        pm.environment.set('_idCart1', resCad._id)\r",
													"        console.log(resCad._id)\r",
													"    }\r",
													"    catch { console.warn(\"falha ao enviar id\") }\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carrinhos/concluir-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"concluir-compra"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CT10- validar rota de  cancelamento de compra do carrinho",
							"item": [
								{
									"name": "Cadastra Usuario/Produto  > c/ Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Criação de variaveis\r",
													"let url = pm.environment.get('baseURL');\r",
													"let nameDefault = pm.environment.get('nameDefault');\r",
													"let emailDefault = pm.environment.get('emailDefault');\r",
													"//let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduto = pm.environment.get('_idProduct');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user')\r",
													"\r",
													"try {\r",
													"    //Cadastra um usuario\r",
													"    let postRequest = {\r",
													"        url: `${url}/usuarios`, //variavel\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json'\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify({\r",
													"                \"nome\": `${nameDefault}`,\r",
													"                \"email\": `${emailDefault}`,\r",
													"                \"password\": `${pwsDefault}`,\r",
													"                \"administrador\": `${admin}`\r",
													"            })\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(postRequest, (err, response) => {\r",
													"        let resCad = response.json()\r",
													"        console.log(err ? err : resCad);\r",
													"\r",
													"        try {\r",
													"            pm.environment.set('_idUserDefault', resCad._id)\r",
													"            console.log(resCad._id)\r",
													"        }\r",
													"        catch { console.warn(\"falha ao enviar id\") }\r",
													"\r",
													"\r",
													"        try {\r",
													"            //Efetua o login do usuario\r",
													"            let postRequest2 = {\r",
													"                url: `${url}/login`, //variavel\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                    mode: 'raw',\r",
													"                    raw: JSON.stringify({\r",
													"                        \"email\": `${emailDefault}`,\r",
													"                        \"password\": `${pwsDefault}`\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"\r",
													"            pm.sendRequest(postRequest2, (err, response) => {\r",
													"                const res2 = response.json()\r",
													"                console.log(err ? err : res2);\r",
													"                try {\r",
													"                    pm.environment.set('token', res2.authorization.slice(7))\r",
													"                    console.log(res2.authorization.slice(7))\r",
													"                }\r",
													"                catch { console.warn(\"falha ao enviar id\") }\r",
													"\r",
													"\r",
													"\r",
													"/*                try { //Neste caso não é nescessario criar novo produto \r",
													"                    //Cria o produto\r",
													"                    let postRequest3 = {\r",
													"                        url: `${url}/produtos`, //variavel\r",
													"                        method: 'POST',\r",
													"                        header: {\r",
													"                            'Content-Type': 'application/json',\r",
													"                            'Authorization': `${token2}`\r",
													"                        },\r",
													"                        body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: JSON.stringify({\r",
													"                                \"nome\": `${nameDefaultProduct}`,\r",
													"                                \"preco\": `${priceDefault}`,\r",
													"                                \"descricao\": `${descriptionProduct}`,\r",
													"                                \"quantidade\": `${amount}`\r",
													"                            })\r",
													"                        }\r",
													"                    }\r",
													"\r",
													"                    pm.sendRequest(postRequest3, (err, response) => {\r",
													"                        let res3 = response.json()\r",
													"                        console.log(err ? err : res3);\r",
													"                        pm.environment.set('_idProduct', res3._id)\r",
													"                        console.log(res3._id)\r",
													"                    })\r",
													"\r",
													"                }\r",
													"                catch {\r",
													"                    console.warn('ERRO \"_idProduct\"')\r",
													"                }\r",
													"*/            })\r",
													"        }\r",
													"        catch {\r",
													"            console.warn('ERRO \"token\"')\r",
													"        }\r",
													"    })\r",
													"}\r",
													"\r",
													"catch {\r",
													"    //console.warn('ERRO \"_idUserDefault\"') \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respIdProduct = pm.response.json()\r",
													"pm.environment.set(\"_idProduct\", respIdProduct._id); \r",
													"//console.log(respID._id);\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 201\", function () {\r",
													"    pm.response.to.have.status(201);     \r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
													"    pm.response.to.have.status('Created');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Cadastro realizado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message', '_id']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"     pm.expect(pm.response.json()[atributo]).to.exist\r",
													" })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"/*\r",
													"//Excluir produto cadastrado\r",
													"\r",
													"let url = pm.environment.get('baseURL')\r",
													"let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"console.log(pm.environment.get('token'))\r",
													"\r",
													"  let deleteUser = {\r",
													"    url:`${url}/produtos/${idProduct}`,\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' : `${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(deleteUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"//_________________________________________________________________________\r",
													"\r",
													"\r",
													"//Excluindo o usuario criado\r",
													"url = pm.environment.get('baseURL');\r",
													"let id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"let  delUser = {\r",
													"    url: `${url}/usuarios/${id}` ,   //variavel\r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"})\r",
													"\r",
													"/*\r",
													"//Limpar as variaveis _idProduct, token e _idUserDefault\r",
													"pm.environment.set(\"_idProduct\", \"\");\r",
													"pm.environment.set(\"token\", \"\");\r",
													"pm.environment.set(\"_idUserDefault\", \"\");\r",
													"*/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{SSD 1TB}\",\r\n  \"preco\": 600,\r\n  \"descricao\": \"SSD Sata3\",\r\n  \"quantidade\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT10.1 Cancelar Compra Carrinho Vazio",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"/*\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
													"});\r",
													"*/\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carrinhos/cancelar-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"cancelar-compra"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT10.2 Cancelar Compra c/ token inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respIDcarrinho = pm.response.json()\r",
													"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
													"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'Unauthorized'\", function () {\r",
													"    pm.response.to.have.status('Unauthorized');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
													"});\r",
													"\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"try { \r",
													"    //Excluir carrinho cadastrado\r",
													"\r",
													"    let url = pm.environment.get('baseURL')\r",
													"    //let idcarrinho = pm.environment.get('_idCart1')\r",
													"\r",
													"    let token = 'Bearer ' + pm.environment.get('token')\r",
													"    console.log(pm.environment.get('token'))\r",
													"    //console.log(\"tentando deletar este produto: \" + idcarrinho)\r",
													"\r",
													"    let deleteCar = {\r",
													"        url: `${url}/carrinhos/cancelar-compra`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': `${token}`\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(deleteCar, (err, response) => {\r",
													"        console.log(err ? err : response.json());\r",
													"    })\r",
													"\r",
													"    try {\r",
													"        /*\r",
													"        //Excluir produto cadastrado\r",
													"\r",
													"        let url1 = pm.environment.get('baseURL')\r",
													"        let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"        let token1 = 'Bearer ' + pm.environment.get('token')\r",
													"        console.log(pm.environment.get('token'))\r",
													"        console.log(\"tentando deletar este produto: \" + idProduct)\r",
													"\r",
													"        let deleteProdct = {\r",
													"            url: `${url1}/produtos/${idProduct}`,\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': `${token1}`\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        pm.sendRequest(deleteProdct, (err, response) => {\r",
													"            console.log(err ? err : response.json());\r",
													"        })\r",
													"*/\r",
													"        try {\r",
													"/*\r",
													"            //Excluindo o usuario criado\r",
													"            const url = pm.environment.get('baseURL');\r",
													"            const id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"            const delUser = {\r",
													"                url: `${url}/usuarios/${id}`,   //variavel\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"\r",
													"                }\r",
													"            }\r",
													"\r",
													"            pm.sendRequest(delUser, (err, response) => {\r",
													"                console.log(err ? err : response.json());\r",
													"            })\r",
													"*/\r",
													"\r",
													"        \r",
													"    } catch { }\r",
													"\r",
													"} catch { }\r",
													"\r",
													"}\r",
													"catch { }\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//let emailDefault = pm.environment.get('emailDefault');\r",
													"//let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduct = pm.environment.get('_idProduct');\r",
													"let idProduct1 = pm.environment.get('_idProduct1');\r",
													"let idProduct2 = pm.environment.get('_idProduct2');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user');\r",
													"let url = pm.environment.get('baseURL');\r",
													"//Cadastra um usuario\r",
													"let postRequest = {\r",
													"    url: `${url}/carrinhos`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': `${token2}`\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"produtos\": [\r",
													"                {\r",
													"                    \"idProduto\": `${idProduct1}`,\r",
													"                    \"quantidade\": 2\r",
													"                },\r",
													"                {\r",
													"                    \"idProduto\": `${idProduct2}`,\r",
													"                    \"quantidade\": 2\r",
													"                }\r",
													"            ]\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    let resCad = response.json()\r",
													"    console.log(err ? err : resCad);\r",
													"\r",
													"    try {\r",
													"        pm.environment.set('_idCart1', resCad._id)\r",
													"        console.log(resCad._id)\r",
													"    }\r",
													"    catch { console.warn(\"falha ao enviar id\") }\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenErr}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carrinhos/cancelar-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"cancelar-compra"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT10 Cancelar Compra",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//atribui variavel a idProduct\r",
													"let respIDcarrinho = pm.response.json()\r",
													"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
													"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
													"\r",
													"//---------------------------------------------------------------------------\r",
													"\r",
													"\r",
													"//executa o teste para verificar se o status code é o esperado!\r",
													"pm.test(\"Status code é 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Verifica se a resposta contem string\r",
													"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"\r",
													"//executa o teste de tempo de resposta\r",
													"pm.test(\"Response time is less than 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
													"});\r",
													"/*\r",
													"//Verifica se a msg de retorno no body está correta!\r",
													"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
													"});\r",
													"*/\r",
													"//Verifica se os atributos estão criados\r",
													"let atributos = ['message']\r",
													"\r",
													"atributos.forEach((atributo) => {\r",
													"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"//-----------------------------------------------------------------------\r",
													"\r",
													"//  Validacao de header\r",
													"\r",
													"pm.test(\"Content-Type is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security is present\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options is present\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection is present\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date is present\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection is present\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive is present\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"try { /*\r",
													"    //Excluir carrinho cadastrado\r",
													"\r",
													"    let url = pm.environment.get('baseURL')\r",
													"    //let idcarrinho = pm.environment.get('_idCart1')\r",
													"\r",
													"    let token = 'Bearer ' + pm.environment.get('token')\r",
													"    console.log(pm.environment.get('token'))\r",
													"    //console.log(\"tentando deletar este produto: \" + idcarrinho)\r",
													"\r",
													"    let deleteCar = {\r",
													"        url: `${url}/carrinhos/cancelar-compra`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Authorization': `${token}`\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.sendRequest(deleteCar, (err, response) => {\r",
													"        console.log(err ? err : response.json());\r",
													"    })\r",
													"*/\r",
													"    try {\r",
													"        //Excluir produto cadastrado\r",
													"\r",
													"        let url1 = pm.environment.get('baseURL')\r",
													"        let idProduct = pm.environment.get('_idProduct')\r",
													"\r",
													"        let token1 = 'Bearer ' + pm.environment.get('token')\r",
													"        console.log(pm.environment.get('token'))\r",
													"        console.log(\"tentando deletar este produto: \" + idProduct)\r",
													"\r",
													"        let deleteProdct = {\r",
													"            url: `${url1}/produtos/${idProduct}`,\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization': `${token1}`\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        pm.sendRequest(deleteProdct, (err, response) => {\r",
													"            console.log(err ? err : response.json());\r",
													"        })\r",
													"\r",
													"        try {\r",
													"\r",
													"            //Excluindo o usuario criado\r",
													"            const url = pm.environment.get('baseURL');\r",
													"            const id = pm.environment.get('_idUserDefault');\r",
													"\r",
													"\r",
													"            const delUser = {\r",
													"                url: `${url}/usuarios/${id}`,   //variavel\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"\r",
													"                }\r",
													"            }\r",
													"\r",
													"            pm.sendRequest(delUser, (err, response) => {\r",
													"                console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"            })\r",
													"\r",
													"\r",
													"        \r",
													"    } catch { }\r",
													"\r",
													"} catch { }\r",
													"\r",
													"}\r",
													"catch { }\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//let emailDefault = pm.environment.get('emailDefault');\r",
													"//let idUserDefault = pm.environment.get('_idUserDefault');\r",
													"let pwsDefault = pm.environment.get('pwsDefault');\r",
													"let idProduct = pm.environment.get('_idProduct');\r",
													"let idProduct1 = pm.environment.get('_idProduct1');\r",
													"let idProduct2 = pm.environment.get('_idProduct2');\r",
													"let token = pm.environment.get('token');\r",
													"let token2 = 'Bearer ' + pm.environment.get('token');\r",
													"let nameDefaultProduct = pm.environment.get('nameDefaultProduct');\r",
													"let priceDefault = pm.environment.get('priceDefault');\r",
													"let descriptionProduct = pm.environment.get('descriptionProduct');\r",
													"let amount = pm.environment.get('amount');\r",
													"let admin = pm.environment.get('admin');\r",
													"let user = pm.environment.get('user');\r",
													"let url = pm.environment.get('baseURL');\r",
													"//Cadastra um usuario\r",
													"let postRequest = {\r",
													"    url: `${url}/carrinhos`, //variavel\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': `${token2}`\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"produtos\": [\r",
													"                {\r",
													"                    \"idProduto\": `${idProduct1}`,\r",
													"                    \"quantidade\": 2\r",
													"                },\r",
													"                {\r",
													"                    \"idProduto\": `${idProduct2}`,\r",
													"                    \"quantidade\": 2\r",
													"                }\r",
													"            ]\r",
													"        })\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    let resCad = response.json()\r",
													"    console.log(err ? err : resCad);\r",
													"\r",
													"    try {\r",
													"        pm.environment.set('_idCart1', resCad._id)\r",
													"        console.log(resCad._id)\r",
													"    }\r",
													"    catch { console.warn(\"falha ao enviar id\") }\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carrinhos/cancelar-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"cancelar-compra"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Testes em Fluxo",
			"item": [
				{
					"name": "Fluxo de compras Usuario (Feliz)",
					"item": [
						{
							"name": "Cadastrar Usuario - c/ êxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//atribui o id criado a uma variavel\r",
											"const response = pm.response.json()\r",
											"pm.environment.set(\"_idUserDefault\", response._id.slice(0)); \r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
											"    pm.response.to.have.status('Created');\r",
											"});\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Cadastro realizado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nameDefault}}\",\r\n  \"email\": \"{{emailDefault}}\",\r\n  \"password\": \"{{pwsDefault}}\",\r\n  \"administrador\": \"{{user}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login c/ êxito",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json()\r",
											"pm.environment.set(\"token\", response.authorization.slice(7)); \r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Login realizado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"const atributos = ['message','authorization']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailDefault}}\",\r\n    \"password\": \"{{pwsDefault}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Lista Produtos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"/*\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Já existe produto com esse nome'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
											"});\r",
											"*/\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"let atributos = ['quantidade','produtos']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastra Carrinho c/ êxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//atribui variavel a idProduct\r",
											"let respIDcarrinho = pm.response.json()\r",
											"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
											"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
											"\r",
											"//---------------------------------------------------------------------------\r",
											"\r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
											"    pm.response.to.have.status('Created');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"/*\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"*/\r",
											"//Verifica se os atributos estão criados\r",
											"let atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT09 Concluir Compra Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//atribui variavel a idProduct\r",
											"let respIDcarrinho = pm.response.json()\r",
											"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
											"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
											"\r",
											"//---------------------------------------------------------------------------\r",
											"\r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"/*\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"*/\r",
											"//Verifica se os atributos estão criados\r",
											"let atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carrinhos/concluir-compra",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar usuario Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//verifica se o Body contem os seguintes atributos\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Registro excluído com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios/{{_idUserDefault}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{_idUserDefault}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Usuarios Final",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"\r",
											"///Verifica se os atributos estão criados\r",
											"const atributos = ['quantidade', 'usuarios']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fluxo de compras admin (Feliz)",
					"item": [
						{
							"name": "Cadastrar Usuario - c/ êxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//atribui o id criado a uma variavel\r",
											"const response = pm.response.json()\r",
											"pm.environment.set(\"_idUserDefault\", response._id.slice(0)); \r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
											"    pm.response.to.have.status('Created');\r",
											"});\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Cadastro realizado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nameDefault}}\",\r\n  \"email\": \"{{emailDefault}}\",\r\n  \"password\": \"{{pwsDefault}}\",\r\n  \"administrador\": \"{{user}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login c/ êxito",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json()\r",
											"pm.environment.set(\"token\", response.authorization.slice(7)); \r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Login realizado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"const atributos = ['message','authorization']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailDefault}}\",\r\n    \"password\": \"{{pwsDefault}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Lista Produtos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"/*\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Já existe produto com esse nome'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
											"});\r",
											"*/\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"let atributos = ['quantidade','produtos']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastra Carrinho c/ êxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//atribui variavel a idProduct\r",
											"let respIDcarrinho = pm.response.json()\r",
											"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
											"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
											"\r",
											"//---------------------------------------------------------------------------\r",
											"\r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
											"    pm.response.to.have.status('Created');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"/*\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"*/\r",
											"//Verifica se os atributos estão criados\r",
											"let atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT09 Concluir Compra Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//atribui variavel a idProduct\r",
											"let respIDcarrinho = pm.response.json()\r",
											"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
											"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
											"\r",
											"//---------------------------------------------------------------------------\r",
											"\r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"/*\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"*/\r",
											"//Verifica se os atributos estão criados\r",
											"let atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carrinhos/concluir-compra",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar usuario Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//verifica se o Body contem os seguintes atributos\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Registro excluído com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios/{{_idUserDefault}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{_idUserDefault}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Usuarios Final",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"\r",
											"///Verifica se os atributos estão criados\r",
											"const atributos = ['quantidade', 'usuarios']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fluxo de compras Usuario (Triste)",
					"item": [
						{
							"name": "Cadastrar Usuario - c/ êxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//atribui o id criado a uma variavel\r",
											"const response = pm.response.json()\r",
											"pm.environment.set(\"_idUserDefault\", response._id.slice(0)); \r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
											"    pm.response.to.have.status('Created');\r",
											"});\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Cadastro realizado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nameDefault}}\",\r\n  \"email\": \"{{emailDefault}}\",\r\n  \"password\": \"{{pwsDefault}}\",\r\n  \"administrador\": \"{{user}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login c/ êxito",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json()\r",
											"pm.environment.set(\"token\", response.authorization.slice(7)); \r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Login realizado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"const atributos = ['message','authorization']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailDefault}}\",\r\n    \"password\": \"{{pwsDefault}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Lista Produtos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"/*\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Já existe produto com esse nome'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
											"});\r",
											"*/\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"let atributos = ['quantidade','produtos']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastra Carrinho c/ êxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//atribui variavel a idProduct\r",
											"let respIDcarrinho = pm.response.json()\r",
											"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
											"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
											"\r",
											"//---------------------------------------------------------------------------\r",
											"\r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
											"    pm.response.to.have.status('Created');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"/*\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"*/\r",
											"//Verifica se os atributos estão criados\r",
											"let atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancelar Compra",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//atribui variavel a idProduct\r",
											"let respIDcarrinho = pm.response.json()\r",
											"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
											"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
											"\r",
											"//---------------------------------------------------------------------------\r",
											"\r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"/*\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"*/\r",
											"//Verifica se os atributos estão criados\r",
											"let atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carrinhos/cancelar-compra",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar usuario Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//verifica se o Body contem os seguintes atributos\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Registro excluído com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios/{{_idUserDefault}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{_idUserDefault}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Usuarios Final",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"\r",
											"///Verifica se os atributos estão criados\r",
											"const atributos = ['quantidade', 'usuarios']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fluxo de compras admin (Triste)",
					"item": [
						{
							"name": "Cadastrar Usuario - c/ êxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//atribui o id criado a uma variavel\r",
											"const response = pm.response.json()\r",
											"pm.environment.set(\"_idUserDefault\", response._id.slice(0)); \r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
											"    pm.response.to.have.status('Created');\r",
											"});\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Cadastro realizado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nameDefault}}\",\r\n  \"email\": \"{{emailDefault}}\",\r\n  \"password\": \"{{pwsDefault}}\",\r\n  \"administrador\": \"{{user}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login c/ êxito",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json()\r",
											"pm.environment.set(\"token\", response.authorization.slice(7)); \r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Login realizado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"const atributos = ['message','authorization']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailDefault}}\",\r\n    \"password\": \"{{pwsDefault}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Lista Produtos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"/*\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Já existe produto com esse nome'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
											"});\r",
											"*/\r",
											"\r",
											"//Verifica se os atributos estão criados\r",
											"let atributos = ['quantidade','produtos']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastra Carrinho c/ êxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//atribui variavel a idProduct\r",
											"let respIDcarrinho = pm.response.json()\r",
											"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
											"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
											"\r",
											"//---------------------------------------------------------------------------\r",
											"\r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'Created'\", function () {\r",
											"    pm.response.to.have.status('Created');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"/*\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"*/\r",
											"//Verifica se os atributos estão criados\r",
											"let atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancelar Compra",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//atribui variavel a idProduct\r",
											"let respIDcarrinho = pm.response.json()\r",
											"pm.environment.set(\"_idCart1\", respIDcarrinho._id);\r",
											"console.log(\"_idCart1 = \" + respIDcarrinho._id);\r",
											"\r",
											"//---------------------------------------------------------------------------\r",
											"\r",
											"\r",
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"/*\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Registro alterado com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"*/\r",
											"//Verifica se os atributos estão criados\r",
											"let atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carrinhos/cancelar-compra",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar usuario Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"//verifica se o Body contem os seguintes atributos\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//Verifica se a msg de retorno no body está correta!\r",
											"pm.test(\"Body contem 'Registro excluído com sucesso'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios/{{_idUserDefault}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{_idUserDefault}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Usuarios Final",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//executa o teste para verificar se o status code é o esperado!\r",
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);     \r",
											"});\r",
											"\r",
											"//Verifica se a resposta contem string\r",
											"pm.test(\"Status Code deu a resposta em String 'OK'\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"//executa o teste de tempo de resposta\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"\r",
											"///Verifica se os atributos estão criados\r",
											"const atributos = ['quantidade', 'usuarios']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											" pm.test(`Resposta contem atributo \"${atributo}\"`, () => {\r",
											"     pm.expect(pm.response.json()[atributo]).to.exist\r",
											" })\r",
											"})\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//-----------------------------------------------------------------------\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}